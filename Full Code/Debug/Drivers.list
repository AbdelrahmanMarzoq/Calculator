
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e00  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002f30  08002f30  00012f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f94  08002f94  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002f94  08002f94  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f94  08002f94  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f94  08002f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f98  08002f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000068  08003004  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08003004  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006692  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f1d  00000000  00000000  00026723  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000012d2  00000000  00000000  00027640  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002b0  00000000  00000000  00028918  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000250  00000000  00000000  00028bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000014fe  00000000  00000000  00028e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000032ab  00000000  00000000  0002a316  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a94d  00000000  00000000  0002d5c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00037f0e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f3c  00000000  00000000  00037f8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	08002f18 	.word	0x08002f18

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	08002f18 	.word	0x08002f18

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2f>:
 800091c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000920:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000924:	bf24      	itt	cs
 8000926:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800092a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800092e:	d90d      	bls.n	800094c <__aeabi_d2f+0x30>
 8000930:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000934:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000938:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800093c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000940:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000944:	bf08      	it	eq
 8000946:	f020 0001 	biceq.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000950:	d121      	bne.n	8000996 <__aeabi_d2f+0x7a>
 8000952:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000956:	bfbc      	itt	lt
 8000958:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800095c:	4770      	bxlt	lr
 800095e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000962:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000966:	f1c2 0218 	rsb	r2, r2, #24
 800096a:	f1c2 0c20 	rsb	ip, r2, #32
 800096e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000972:	fa20 f002 	lsr.w	r0, r0, r2
 8000976:	bf18      	it	ne
 8000978:	f040 0001 	orrne.w	r0, r0, #1
 800097c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000980:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000984:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000988:	ea40 000c 	orr.w	r0, r0, ip
 800098c:	fa23 f302 	lsr.w	r3, r3, r2
 8000990:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000994:	e7cc      	b.n	8000930 <__aeabi_d2f+0x14>
 8000996:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800099a:	d107      	bne.n	80009ac <__aeabi_d2f+0x90>
 800099c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009a0:	bf1e      	ittt	ne
 80009a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bxne	lr
 80009ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_frsub>:
 80009bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009c0:	e002      	b.n	80009c8 <__addsf3>
 80009c2:	bf00      	nop

080009c4 <__aeabi_fsub>:
 80009c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009c8 <__addsf3>:
 80009c8:	0042      	lsls	r2, r0, #1
 80009ca:	bf1f      	itttt	ne
 80009cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009d0:	ea92 0f03 	teqne	r2, r3
 80009d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009dc:	d06a      	beq.n	8000ab4 <__addsf3+0xec>
 80009de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009e6:	bfc1      	itttt	gt
 80009e8:	18d2      	addgt	r2, r2, r3
 80009ea:	4041      	eorgt	r1, r0
 80009ec:	4048      	eorgt	r0, r1
 80009ee:	4041      	eorgt	r1, r0
 80009f0:	bfb8      	it	lt
 80009f2:	425b      	neglt	r3, r3
 80009f4:	2b19      	cmp	r3, #25
 80009f6:	bf88      	it	hi
 80009f8:	4770      	bxhi	lr
 80009fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a06:	bf18      	it	ne
 8000a08:	4240      	negne	r0, r0
 8000a0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4249      	negne	r1, r1
 8000a1a:	ea92 0f03 	teq	r2, r3
 8000a1e:	d03f      	beq.n	8000aa0 <__addsf3+0xd8>
 8000a20:	f1a2 0201 	sub.w	r2, r2, #1
 8000a24:	fa41 fc03 	asr.w	ip, r1, r3
 8000a28:	eb10 000c 	adds.w	r0, r0, ip
 8000a2c:	f1c3 0320 	rsb	r3, r3, #32
 8000a30:	fa01 f103 	lsl.w	r1, r1, r3
 8000a34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a38:	d502      	bpl.n	8000a40 <__addsf3+0x78>
 8000a3a:	4249      	negs	r1, r1
 8000a3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a44:	d313      	bcc.n	8000a6e <__addsf3+0xa6>
 8000a46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a4a:	d306      	bcc.n	8000a5a <__addsf3+0x92>
 8000a4c:	0840      	lsrs	r0, r0, #1
 8000a4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a52:	f102 0201 	add.w	r2, r2, #1
 8000a56:	2afe      	cmp	r2, #254	; 0xfe
 8000a58:	d251      	bcs.n	8000afe <__addsf3+0x136>
 8000a5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a62:	bf08      	it	eq
 8000a64:	f020 0001 	biceq.w	r0, r0, #1
 8000a68:	ea40 0003 	orr.w	r0, r0, r3
 8000a6c:	4770      	bx	lr
 8000a6e:	0049      	lsls	r1, r1, #1
 8000a70:	eb40 0000 	adc.w	r0, r0, r0
 8000a74:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a78:	f1a2 0201 	sub.w	r2, r2, #1
 8000a7c:	d1ed      	bne.n	8000a5a <__addsf3+0x92>
 8000a7e:	fab0 fc80 	clz	ip, r0
 8000a82:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a86:	ebb2 020c 	subs.w	r2, r2, ip
 8000a8a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a8e:	bfaa      	itet	ge
 8000a90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a94:	4252      	neglt	r2, r2
 8000a96:	4318      	orrge	r0, r3
 8000a98:	bfbc      	itt	lt
 8000a9a:	40d0      	lsrlt	r0, r2
 8000a9c:	4318      	orrlt	r0, r3
 8000a9e:	4770      	bx	lr
 8000aa0:	f092 0f00 	teq	r2, #0
 8000aa4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000aa8:	bf06      	itte	eq
 8000aaa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aae:	3201      	addeq	r2, #1
 8000ab0:	3b01      	subne	r3, #1
 8000ab2:	e7b5      	b.n	8000a20 <__addsf3+0x58>
 8000ab4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ab8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000abc:	bf18      	it	ne
 8000abe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac2:	d021      	beq.n	8000b08 <__addsf3+0x140>
 8000ac4:	ea92 0f03 	teq	r2, r3
 8000ac8:	d004      	beq.n	8000ad4 <__addsf3+0x10c>
 8000aca:	f092 0f00 	teq	r2, #0
 8000ace:	bf08      	it	eq
 8000ad0:	4608      	moveq	r0, r1
 8000ad2:	4770      	bx	lr
 8000ad4:	ea90 0f01 	teq	r0, r1
 8000ad8:	bf1c      	itt	ne
 8000ada:	2000      	movne	r0, #0
 8000adc:	4770      	bxne	lr
 8000ade:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ae2:	d104      	bne.n	8000aee <__addsf3+0x126>
 8000ae4:	0040      	lsls	r0, r0, #1
 8000ae6:	bf28      	it	cs
 8000ae8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000aec:	4770      	bx	lr
 8000aee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000af2:	bf3c      	itt	cc
 8000af4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bxcc	lr
 8000afa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000afe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b06:	4770      	bx	lr
 8000b08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b0c:	bf16      	itet	ne
 8000b0e:	4608      	movne	r0, r1
 8000b10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b14:	4601      	movne	r1, r0
 8000b16:	0242      	lsls	r2, r0, #9
 8000b18:	bf06      	itte	eq
 8000b1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b1e:	ea90 0f01 	teqeq	r0, r1
 8000b22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_ui2f>:
 8000b28:	f04f 0300 	mov.w	r3, #0
 8000b2c:	e004      	b.n	8000b38 <__aeabi_i2f+0x8>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_i2f>:
 8000b30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b34:	bf48      	it	mi
 8000b36:	4240      	negmi	r0, r0
 8000b38:	ea5f 0c00 	movs.w	ip, r0
 8000b3c:	bf08      	it	eq
 8000b3e:	4770      	bxeq	lr
 8000b40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b44:	4601      	mov	r1, r0
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	e01c      	b.n	8000b86 <__aeabi_l2f+0x2a>

08000b4c <__aeabi_ul2f>:
 8000b4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b50:	bf08      	it	eq
 8000b52:	4770      	bxeq	lr
 8000b54:	f04f 0300 	mov.w	r3, #0
 8000b58:	e00a      	b.n	8000b70 <__aeabi_l2f+0x14>
 8000b5a:	bf00      	nop

08000b5c <__aeabi_l2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__aeabi_l2f+0x14>
 8000b6a:	4240      	negs	r0, r0
 8000b6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b70:	ea5f 0c01 	movs.w	ip, r1
 8000b74:	bf02      	ittt	eq
 8000b76:	4684      	moveq	ip, r0
 8000b78:	4601      	moveq	r1, r0
 8000b7a:	2000      	moveq	r0, #0
 8000b7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b80:	bf08      	it	eq
 8000b82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b8a:	fabc f28c 	clz	r2, ip
 8000b8e:	3a08      	subs	r2, #8
 8000b90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b94:	db10      	blt.n	8000bb8 <__aeabi_l2f+0x5c>
 8000b96:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b9a:	4463      	add	r3, ip
 8000b9c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ba8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f102 0220 	add.w	r2, r2, #32
 8000bbc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bc8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_fmul>:
 8000bd8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bdc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000be0:	bf1e      	ittt	ne
 8000be2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000be6:	ea92 0f0c 	teqne	r2, ip
 8000bea:	ea93 0f0c 	teqne	r3, ip
 8000bee:	d06f      	beq.n	8000cd0 <__aeabi_fmul+0xf8>
 8000bf0:	441a      	add	r2, r3
 8000bf2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bf6:	0240      	lsls	r0, r0, #9
 8000bf8:	bf18      	it	ne
 8000bfa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bfe:	d01e      	beq.n	8000c3e <__aeabi_fmul+0x66>
 8000c00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c18:	bf3e      	ittt	cc
 8000c1a:	0049      	lslcc	r1, r1, #1
 8000c1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c20:	005b      	lslcc	r3, r3, #1
 8000c22:	ea40 0001 	orr.w	r0, r0, r1
 8000c26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c2a:	2afd      	cmp	r2, #253	; 0xfd
 8000c2c:	d81d      	bhi.n	8000c6a <__aeabi_fmul+0x92>
 8000c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	4770      	bx	lr
 8000c3e:	f090 0f00 	teq	r0, #0
 8000c42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c46:	bf08      	it	eq
 8000c48:	0249      	lsleq	r1, r1, #9
 8000c4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c52:	3a7f      	subs	r2, #127	; 0x7f
 8000c54:	bfc2      	ittt	gt
 8000c56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c5e:	4770      	bxgt	lr
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	f04f 0300 	mov.w	r3, #0
 8000c68:	3a01      	subs	r2, #1
 8000c6a:	dc5d      	bgt.n	8000d28 <__aeabi_fmul+0x150>
 8000c6c:	f112 0f19 	cmn.w	r2, #25
 8000c70:	bfdc      	itt	le
 8000c72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c76:	4770      	bxle	lr
 8000c78:	f1c2 0200 	rsb	r2, r2, #0
 8000c7c:	0041      	lsls	r1, r0, #1
 8000c7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c82:	f1c2 0220 	rsb	r2, r2, #32
 8000c86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c8e:	f140 0000 	adc.w	r0, r0, #0
 8000c92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c96:	bf08      	it	eq
 8000c98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c9c:	4770      	bx	lr
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ca6:	bf02      	ittt	eq
 8000ca8:	0040      	lsleq	r0, r0, #1
 8000caa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cae:	3a01      	subeq	r2, #1
 8000cb0:	d0f9      	beq.n	8000ca6 <__aeabi_fmul+0xce>
 8000cb2:	ea40 000c 	orr.w	r0, r0, ip
 8000cb6:	f093 0f00 	teq	r3, #0
 8000cba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cbe:	bf02      	ittt	eq
 8000cc0:	0049      	lsleq	r1, r1, #1
 8000cc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cc6:	3b01      	subeq	r3, #1
 8000cc8:	d0f9      	beq.n	8000cbe <__aeabi_fmul+0xe6>
 8000cca:	ea41 010c 	orr.w	r1, r1, ip
 8000cce:	e78f      	b.n	8000bf0 <__aeabi_fmul+0x18>
 8000cd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cd4:	ea92 0f0c 	teq	r2, ip
 8000cd8:	bf18      	it	ne
 8000cda:	ea93 0f0c 	teqne	r3, ip
 8000cde:	d00a      	beq.n	8000cf6 <__aeabi_fmul+0x11e>
 8000ce0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ce4:	bf18      	it	ne
 8000ce6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cea:	d1d8      	bne.n	8000c9e <__aeabi_fmul+0xc6>
 8000cec:	ea80 0001 	eor.w	r0, r0, r1
 8000cf0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f090 0f00 	teq	r0, #0
 8000cfa:	bf17      	itett	ne
 8000cfc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d00:	4608      	moveq	r0, r1
 8000d02:	f091 0f00 	teqne	r1, #0
 8000d06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d0a:	d014      	beq.n	8000d36 <__aeabi_fmul+0x15e>
 8000d0c:	ea92 0f0c 	teq	r2, ip
 8000d10:	d101      	bne.n	8000d16 <__aeabi_fmul+0x13e>
 8000d12:	0242      	lsls	r2, r0, #9
 8000d14:	d10f      	bne.n	8000d36 <__aeabi_fmul+0x15e>
 8000d16:	ea93 0f0c 	teq	r3, ip
 8000d1a:	d103      	bne.n	8000d24 <__aeabi_fmul+0x14c>
 8000d1c:	024b      	lsls	r3, r1, #9
 8000d1e:	bf18      	it	ne
 8000d20:	4608      	movne	r0, r1
 8000d22:	d108      	bne.n	8000d36 <__aeabi_fmul+0x15e>
 8000d24:	ea80 0001 	eor.w	r0, r0, r1
 8000d28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d34:	4770      	bx	lr
 8000d36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_fdiv>:
 8000d40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d48:	bf1e      	ittt	ne
 8000d4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4e:	ea92 0f0c 	teqne	r2, ip
 8000d52:	ea93 0f0c 	teqne	r3, ip
 8000d56:	d069      	beq.n	8000e2c <__aeabi_fdiv+0xec>
 8000d58:	eba2 0203 	sub.w	r2, r2, r3
 8000d5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d60:	0249      	lsls	r1, r1, #9
 8000d62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d66:	d037      	beq.n	8000dd8 <__aeabi_fdiv+0x98>
 8000d68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	bf38      	it	cc
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d86:	428b      	cmp	r3, r1
 8000d88:	bf24      	itt	cs
 8000d8a:	1a5b      	subcs	r3, r3, r1
 8000d8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d94:	bf24      	itt	cs
 8000d96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000da2:	bf24      	itt	cs
 8000da4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000da8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000db0:	bf24      	itt	cs
 8000db2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000db6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	bf18      	it	ne
 8000dbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dc2:	d1e0      	bne.n	8000d86 <__aeabi_fdiv+0x46>
 8000dc4:	2afd      	cmp	r2, #253	; 0xfd
 8000dc6:	f63f af50 	bhi.w	8000c6a <__aeabi_fmul+0x92>
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd0:	bf08      	it	eq
 8000dd2:	f020 0001 	biceq.w	r0, r0, #1
 8000dd6:	4770      	bx	lr
 8000dd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ddc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000de0:	327f      	adds	r2, #127	; 0x7f
 8000de2:	bfc2      	ittt	gt
 8000de4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000de8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dec:	4770      	bxgt	lr
 8000dee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df2:	f04f 0300 	mov.w	r3, #0
 8000df6:	3a01      	subs	r2, #1
 8000df8:	e737      	b.n	8000c6a <__aeabi_fmul+0x92>
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fdiv+0xc2>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fdiv+0xda>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e795      	b.n	8000d58 <__aeabi_fdiv+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	d108      	bne.n	8000e48 <__aeabi_fdiv+0x108>
 8000e36:	0242      	lsls	r2, r0, #9
 8000e38:	f47f af7d 	bne.w	8000d36 <__aeabi_fmul+0x15e>
 8000e3c:	ea93 0f0c 	teq	r3, ip
 8000e40:	f47f af70 	bne.w	8000d24 <__aeabi_fmul+0x14c>
 8000e44:	4608      	mov	r0, r1
 8000e46:	e776      	b.n	8000d36 <__aeabi_fmul+0x15e>
 8000e48:	ea93 0f0c 	teq	r3, ip
 8000e4c:	d104      	bne.n	8000e58 <__aeabi_fdiv+0x118>
 8000e4e:	024b      	lsls	r3, r1, #9
 8000e50:	f43f af4c 	beq.w	8000cec <__aeabi_fmul+0x114>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e76e      	b.n	8000d36 <__aeabi_fmul+0x15e>
 8000e58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e5c:	bf18      	it	ne
 8000e5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	d1ca      	bne.n	8000dfa <__aeabi_fdiv+0xba>
 8000e64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e68:	f47f af5c 	bne.w	8000d24 <__aeabi_fmul+0x14c>
 8000e6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e70:	f47f af3c 	bne.w	8000cec <__aeabi_fmul+0x114>
 8000e74:	e75f      	b.n	8000d36 <__aeabi_fmul+0x15e>
 8000e76:	bf00      	nop

08000e78 <__gesf2>:
 8000e78:	f04f 3cff 	mov.w	ip, #4294967295
 8000e7c:	e006      	b.n	8000e8c <__cmpsf2+0x4>
 8000e7e:	bf00      	nop

08000e80 <__lesf2>:
 8000e80:	f04f 0c01 	mov.w	ip, #1
 8000e84:	e002      	b.n	8000e8c <__cmpsf2+0x4>
 8000e86:	bf00      	nop

08000e88 <__cmpsf2>:
 8000e88:	f04f 0c01 	mov.w	ip, #1
 8000e8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	bf18      	it	ne
 8000e9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ea2:	d011      	beq.n	8000ec8 <__cmpsf2+0x40>
 8000ea4:	b001      	add	sp, #4
 8000ea6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eaa:	bf18      	it	ne
 8000eac:	ea90 0f01 	teqne	r0, r1
 8000eb0:	bf58      	it	pl
 8000eb2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eb6:	bf88      	it	hi
 8000eb8:	17c8      	asrhi	r0, r1, #31
 8000eba:	bf38      	it	cc
 8000ebc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ec0:	bf18      	it	ne
 8000ec2:	f040 0001 	orrne.w	r0, r0, #1
 8000ec6:	4770      	bx	lr
 8000ec8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ecc:	d102      	bne.n	8000ed4 <__cmpsf2+0x4c>
 8000ece:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ed2:	d105      	bne.n	8000ee0 <__cmpsf2+0x58>
 8000ed4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ed8:	d1e4      	bne.n	8000ea4 <__cmpsf2+0x1c>
 8000eda:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ede:	d0e1      	beq.n	8000ea4 <__cmpsf2+0x1c>
 8000ee0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <__aeabi_cfrcmple>:
 8000ee8:	4684      	mov	ip, r0
 8000eea:	4608      	mov	r0, r1
 8000eec:	4661      	mov	r1, ip
 8000eee:	e7ff      	b.n	8000ef0 <__aeabi_cfcmpeq>

08000ef0 <__aeabi_cfcmpeq>:
 8000ef0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ef2:	f7ff ffc9 	bl	8000e88 <__cmpsf2>
 8000ef6:	2800      	cmp	r0, #0
 8000ef8:	bf48      	it	mi
 8000efa:	f110 0f00 	cmnmi.w	r0, #0
 8000efe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f00 <__aeabi_fcmpeq>:
 8000f00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f04:	f7ff fff4 	bl	8000ef0 <__aeabi_cfcmpeq>
 8000f08:	bf0c      	ite	eq
 8000f0a:	2001      	moveq	r0, #1
 8000f0c:	2000      	movne	r0, #0
 8000f0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f12:	bf00      	nop

08000f14 <__aeabi_fcmplt>:
 8000f14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f18:	f7ff ffea 	bl	8000ef0 <__aeabi_cfcmpeq>
 8000f1c:	bf34      	ite	cc
 8000f1e:	2001      	movcc	r0, #1
 8000f20:	2000      	movcs	r0, #0
 8000f22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f26:	bf00      	nop

08000f28 <__aeabi_fcmple>:
 8000f28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f2c:	f7ff ffe0 	bl	8000ef0 <__aeabi_cfcmpeq>
 8000f30:	bf94      	ite	ls
 8000f32:	2001      	movls	r0, #1
 8000f34:	2000      	movhi	r0, #0
 8000f36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f3a:	bf00      	nop

08000f3c <__aeabi_fcmpge>:
 8000f3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f40:	f7ff ffd2 	bl	8000ee8 <__aeabi_cfrcmple>
 8000f44:	bf94      	ite	ls
 8000f46:	2001      	movls	r0, #1
 8000f48:	2000      	movhi	r0, #0
 8000f4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4e:	bf00      	nop

08000f50 <__aeabi_fcmpgt>:
 8000f50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f54:	f7ff ffc8 	bl	8000ee8 <__aeabi_cfrcmple>
 8000f58:	bf34      	ite	cc
 8000f5a:	2001      	movcc	r0, #1
 8000f5c:	2000      	movcs	r0, #0
 8000f5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f62:	bf00      	nop

08000f64 <__aeabi_f2iz>:
 8000f64:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f6c:	d30f      	bcc.n	8000f8e <__aeabi_f2iz+0x2a>
 8000f6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f76:	d90d      	bls.n	8000f94 <__aeabi_f2iz+0x30>
 8000f78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f80:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f84:	fa23 f002 	lsr.w	r0, r3, r2
 8000f88:	bf18      	it	ne
 8000f8a:	4240      	negne	r0, r0
 8000f8c:	4770      	bx	lr
 8000f8e:	f04f 0000 	mov.w	r0, #0
 8000f92:	4770      	bx	lr
 8000f94:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f98:	d101      	bne.n	8000f9e <__aeabi_f2iz+0x3a>
 8000f9a:	0242      	lsls	r2, r0, #9
 8000f9c:	d105      	bne.n	8000faa <__aeabi_f2iz+0x46>
 8000f9e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fa2:	bf08      	it	eq
 8000fa4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fa8:	4770      	bx	lr
 8000faa:	f04f 0000 	mov.w	r0, #0
 8000fae:	4770      	bx	lr

08000fb0 <Key_Init>:
#include "Keypad.h"

static uint8_t Btn[KEYPAD_ROW_][KEYPAD_COL_];

void Key_Init(Keypad_t *Keypad, const uint8_t D_char[KEYPAD_ROW_][KEYPAD_COL_])
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	// Init Rows Wires to be O/P and Logic LOW
	for (int index = 0; index < KEYPAD_ROW_; index++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e01d      	b.n	8000ffc <Key_Init+0x4c>
	{
		Keypad->ROW[index].GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	4413      	add	r3, r2
 8000fc8:	2204      	movs	r2, #4
 8000fca:	719a      	strb	r2, [r3, #6]
		Keypad->ROW[index].GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	71da      	strb	r2, [r3, #7]
		GPIO_INIT(&(Keypad->ROW[index]));
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fdd8 	bl	8001b96 <GPIO_INIT>
		GPIO_WRITE_PIN(&(Keypad->ROW[index]), LOW);
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 fe68 	bl	8001cc6 <GPIO_WRITE_PIN>
	for (int index = 0; index < KEYPAD_ROW_; index++)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	ddde      	ble.n	8000fc0 <Key_Init+0x10>
	}

	// Init Columns Wire to be I/P
	for (int index = 0; index < KEYPAD_COL_; index++)
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	e018      	b.n	800103a <Key_Init+0x8a>
	{
		Keypad->COL[index].GPIO_MODE = GPIO_MODE_INPUT_PD;
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	3304      	adds	r3, #4
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	4413      	add	r3, r2
 8001012:	2203      	movs	r2, #3
 8001014:	719a      	strb	r2, [r3, #6]
		Keypad->COL[index].GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	3304      	adds	r3, #4
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	4413      	add	r3, r2
 8001020:	2202      	movs	r2, #2
 8001022:	71da      	strb	r2, [r3, #7]
		GPIO_INIT(&(Keypad->COL[index]));
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	3304      	adds	r3, #4
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fdb1 	bl	8001b96 <GPIO_INIT>
	for (int index = 0; index < KEYPAD_COL_; index++)
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	3301      	adds	r3, #1
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	2b03      	cmp	r3, #3
 800103e:	dde3      	ble.n	8001008 <Key_Init+0x58>
	}

	// Draw Keypad (2D Array) with Custom char
	for (int row = 0; row < KEYPAD_ROW_; row++)
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e01a      	b.n	800107c <Key_Init+0xcc>
	{
		for (int col = 0; col < KEYPAD_COL_; col++)
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	e011      	b.n	8001070 <Key_Init+0xc0>
		{
			Btn[row][col] =  D_char[row][col];
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	441a      	add	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4413      	add	r3, r2
 8001058:	7819      	ldrb	r1, [r3, #0]
 800105a:	4a0c      	ldr	r2, [pc, #48]	; (800108c <Key_Init+0xdc>)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	441a      	add	r2, r3
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	4413      	add	r3, r2
 8001066:	460a      	mov	r2, r1
 8001068:	701a      	strb	r2, [r3, #0]
		for (int col = 0; col < KEYPAD_COL_; col++)
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	3301      	adds	r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	2b03      	cmp	r3, #3
 8001074:	ddea      	ble.n	800104c <Key_Init+0x9c>
	for (int row = 0; row < KEYPAD_ROW_; row++)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3301      	adds	r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2b03      	cmp	r3, #3
 8001080:	dde1      	ble.n	8001046 <Key_Init+0x96>
		}
	}
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000084 	.word	0x20000084

08001090 <Key_get>:


uint8_t Key_get(Keypad_t *Keypad)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	// Select Cell that you pressed on
	for (int row = 0; row < KEYPAD_ROW_; row++)
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	e049      	b.n	8001132 <Key_get+0xa2>
	{
		GPIO_WRITE_PIN(&(Keypad->ROW[row]), HIGH);
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	2101      	movs	r1, #1
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fe0c 	bl	8001cc6 <GPIO_WRITE_PIN>
		for (volatile int i = 0; i < 255; i++);
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	e002      	b.n	80010ba <Key_get+0x2a>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3301      	adds	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2bfe      	cmp	r3, #254	; 0xfe
 80010be:	ddf9      	ble.n	80010b4 <Key_get+0x24>
		for (int col = 0; col < KEYPAD_COL_; col++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	e027      	b.n	8001116 <Key_get+0x86>
		{

			if (GPIO_READ_PIN(&(Keypad->COL[col])) == HIGH)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	3304      	adds	r3, #4
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fde4 	bl	8001c9e <GPIO_READ_PIN>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d119      	bne.n	8001110 <Key_get+0x80>
			{
				// In Future will Write Professional Delay
				for (volatile int i = 0; i < 100000; i++);
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	e002      	b.n	80010e8 <Key_get+0x58>
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	3301      	adds	r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4a16      	ldr	r2, [pc, #88]	; (8001144 <Key_get+0xb4>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	ddf8      	ble.n	80010e2 <Key_get+0x52>
				GPIO_WRITE_PIN(&(Keypad->ROW[row]), LOW);
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	4413      	add	r3, r2
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fde3 	bl	8001cc6 <GPIO_WRITE_PIN>
				return Btn[row][col];
 8001100:	4a11      	ldr	r2, [pc, #68]	; (8001148 <Key_get+0xb8>)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	441a      	add	r2, r3
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4413      	add	r3, r2
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	e014      	b.n	800113a <Key_get+0xaa>
		for (int col = 0; col < KEYPAD_COL_; col++)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	3301      	adds	r3, #1
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	2b03      	cmp	r3, #3
 800111a:	ddd4      	ble.n	80010c6 <Key_get+0x36>
			}
		}
		GPIO_WRITE_PIN(&(Keypad->ROW[row]), LOW);
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fdcd 	bl	8001cc6 <GPIO_WRITE_PIN>
	for (int row = 0; row < KEYPAD_ROW_; row++)
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	3301      	adds	r3, #1
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	2b03      	cmp	r3, #3
 8001136:	ddb2      	ble.n	800109e <Key_get+0xe>
	}

	// In case you didn`t Press any thing
	return (uint8_t)' ';
 8001138:	2320      	movs	r3, #32
}
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	0001869f 	.word	0x0001869f
 8001148:	20000084 	.word	0x20000084

0800114c <LCD_4bit_init>:
							/*************************************/
							/*		 Function Definition		 */
							/*************************************/

void LCD_4bit_init(LCD_4bit_t *LCD)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	myWait(20);
 8001154:	2014      	movs	r0, #20
 8001156:	f000 f9e3 	bl	8001520 <myWait>

	// Init RS & EN & DATA Lines
	LCD->RS.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2204      	movs	r2, #4
 800115e:	719a      	strb	r2, [r3, #6]
	LCD->RS.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2202      	movs	r2, #2
 8001164:	71da      	strb	r2, [r3, #7]
	LCD->EN.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2204      	movs	r2, #4
 800116a:	739a      	strb	r2, [r3, #14]
	LCD->EN.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2202      	movs	r2, #2
 8001170:	73da      	strb	r2, [r3, #15]
	GPIO_INIT(&(LCD->RS));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fd0e 	bl	8001b96 <GPIO_INIT>
	GPIO_INIT(&(LCD->EN));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3308      	adds	r3, #8
 800117e:	4618      	mov	r0, r3
 8001180:	f000 fd09 	bl	8001b96 <GPIO_INIT>
	GPIO_WRITE_PIN(&(LCD->RS), LOW);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f000 fd9c 	bl	8001cc6 <GPIO_WRITE_PIN>
	GPIO_WRITE_PIN(&(LCD->EN), LOW);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3308      	adds	r3, #8
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f000 fd96 	bl	8001cc6 <GPIO_WRITE_PIN>

	// Init Data Lines
	for (char index = 0; index < 4; index++)
 800119a:	2300      	movs	r3, #0
 800119c:	73fb      	strb	r3, [r7, #15]
 800119e:	e021      	b.n	80011e4 <LCD_4bit_init+0x98>
	{
		LCD->Data[(int)index].GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	3303      	adds	r3, #3
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	4413      	add	r3, r2
 80011aa:	2204      	movs	r2, #4
 80011ac:	719a      	strb	r2, [r3, #6]
		LCD->Data[(int)index].GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	3303      	adds	r3, #3
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4413      	add	r3, r2
 80011b8:	2202      	movs	r2, #2
 80011ba:	71da      	strb	r2, [r3, #7]
		GPIO_INIT(&(LCD->Data[(int)index]));
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	3303      	adds	r3, #3
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 fce5 	bl	8001b96 <GPIO_INIT>
		GPIO_WRITE_PIN(&(LCD->Data[(int)index]), LOW);
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	3303      	adds	r3, #3
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 fd74 	bl	8001cc6 <GPIO_WRITE_PIN>
	for (char index = 0; index < 4; index++)
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	3301      	adds	r3, #1
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d9da      	bls.n	80011a0 <LCD_4bit_init+0x54>
	}
	// Following init from DataSheet
	// Delay from DataSheet 20 ms in future will write prof delay
	myWait(15);
 80011ea:	200f      	movs	r0, #15
 80011ec:	f000 f998 	bl	8001520 <myWait>

	LCD_4bit_Command(LCD, _LCD_RETURN_HOME); // Must Be First Command in 4bit mode
 80011f0:	2102      	movs	r1, #2
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 f85a 	bl	80012ac <LCD_4bit_Command>
	LCD_4bit_Command(LCD, _LCD_4BIT_MODE);
 80011f8:	2120      	movs	r1, #32
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f856 	bl	80012ac <LCD_4bit_Command>
	LCD_4bit_Command(LCD, _LCD_4BIT_MODE | _LCD_2LINE | _LCD_DOT_MATRIX_7);
 8001200:	2128      	movs	r1, #40	; 0x28
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f852 	bl	80012ac <LCD_4bit_Command>
	// Send command to clear Screen
	LCD_4bit_Command(LCD, _LCD_CLEAR);
 8001208:	2101      	movs	r1, #1
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f84e 	bl	80012ac <LCD_4bit_Command>
	// Send command to Display on and Blink cursor on
	LCD_4bit_Command(LCD, _LCD_DISPLAY_ON | _LCD_UNDERLINE_CURSOR_ON);
 8001210:	210e      	movs	r1, #14
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 f84a 	bl	80012ac <LCD_4bit_Command>
	// Send command to set cursor increamenet toward right after writing without shift display
	LCD_4bit_Command(LCD, _LCD_INC_CURSOR_SHIFT_OFF);
 8001218:	2106      	movs	r1, #6
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 f846 	bl	80012ac <LCD_4bit_Command>
	// Send command that i ready to recieve data so i make the AC (Address counter) to First address in DDRAM
	LCD_4bit_Command(LCD, _LCD_DDRAM_START);
 8001220:	2180      	movs	r1, #128	; 0x80
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f842 	bl	80012ac <LCD_4bit_Command>
}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <LCD_4bit_Set_Cursor>:

void LCD_4bit_Set_Cursor(LCD_4bit_t *LCD, uint8_t row, uint8_t column){
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	70fb      	strb	r3, [r7, #3]
 800123c:	4613      	mov	r3, r2
 800123e:	70bb      	strb	r3, [r7, #2]
	if ( (row == 2 || row == 1) && ((column > 0) && (column <= 16)) )
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d002      	beq.n	800124c <LCD_4bit_Set_Cursor+0x1c>
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d129      	bne.n	80012a0 <LCD_4bit_Set_Cursor+0x70>
 800124c:	78bb      	ldrb	r3, [r7, #2]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d026      	beq.n	80012a0 <LCD_4bit_Set_Cursor+0x70>
 8001252:	78bb      	ldrb	r3, [r7, #2]
 8001254:	2b10      	cmp	r3, #16
 8001256:	d823      	bhi.n	80012a0 <LCD_4bit_Set_Cursor+0x70>
	{
		switch(row)
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d002      	beq.n	8001264 <LCD_4bit_Set_Cursor+0x34>
 800125e:	2b02      	cmp	r3, #2
 8001260:	d00e      	beq.n	8001280 <LCD_4bit_Set_Cursor+0x50>
			LCD_4bit_Command(LCD, _LCD_ROW2_START + --column);
			AddressDD = 16 + column;
			break;
		}
	}
}
 8001262:	e01d      	b.n	80012a0 <LCD_4bit_Set_Cursor+0x70>
			LCD_4bit_Command(LCD, _LCD_ROW1_START + --column);
 8001264:	78bb      	ldrb	r3, [r7, #2]
 8001266:	3b01      	subs	r3, #1
 8001268:	70bb      	strb	r3, [r7, #2]
 800126a:	78bb      	ldrb	r3, [r7, #2]
 800126c:	3b80      	subs	r3, #128	; 0x80
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4619      	mov	r1, r3
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 f81a 	bl	80012ac <LCD_4bit_Command>
			AddressDD = 0 + column;
 8001278:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <LCD_4bit_Set_Cursor+0x78>)
 800127a:	78bb      	ldrb	r3, [r7, #2]
 800127c:	7013      	strb	r3, [r2, #0]
			break;
 800127e:	e00f      	b.n	80012a0 <LCD_4bit_Set_Cursor+0x70>
			LCD_4bit_Command(LCD, _LCD_ROW2_START + --column);
 8001280:	78bb      	ldrb	r3, [r7, #2]
 8001282:	3b01      	subs	r3, #1
 8001284:	70bb      	strb	r3, [r7, #2]
 8001286:	78bb      	ldrb	r3, [r7, #2]
 8001288:	3b40      	subs	r3, #64	; 0x40
 800128a:	b2db      	uxtb	r3, r3
 800128c:	4619      	mov	r1, r3
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f80c 	bl	80012ac <LCD_4bit_Command>
			AddressDD = 16 + column;
 8001294:	78bb      	ldrb	r3, [r7, #2]
 8001296:	3310      	adds	r3, #16
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <LCD_4bit_Set_Cursor+0x78>)
 800129c:	701a      	strb	r2, [r3, #0]
			break;
 800129e:	bf00      	nop
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000094 	.word	0x20000094

080012ac <LCD_4bit_Command>:

void LCD_4bit_Command(LCD_4bit_t *LCD, uint8_t command){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	70fb      	strb	r3, [r7, #3]
	// To Tell LCD That i will send command Write RS LOW @ref INFO (LCD.H)
	GPIO_WRITE_PIN(&(LCD->RS), LOW);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fd02 	bl	8001cc6 <GPIO_WRITE_PIN>
	// Send High Nibble on Command Wire
	Send_4bit(LCD, (command >> 4));
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4619      	mov	r1, r3
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 f8e2 	bl	8001494 <Send_4bit>
	// Send Low Nibble on Command Wire
	Send_4bit(LCD, command);
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	4619      	mov	r1, r3
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f8dd 	bl	8001494 <Send_4bit>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <LCD_4bit_Print_Char>:

void LCD_4bit_Print_Char(LCD_4bit_t *LCD, uint8_t Data){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	70fb      	strb	r3, [r7, #3]

	if (AddressDD == 16) LCD_4bit_Set_Cursor(LCD, 2, 1);
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <LCD_4bit_Print_Char+0x70>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b10      	cmp	r3, #16
 80012f6:	d105      	bne.n	8001304 <LCD_4bit_Print_Char+0x20>
 80012f8:	2201      	movs	r2, #1
 80012fa:	2102      	movs	r1, #2
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff97 	bl	8001230 <LCD_4bit_Set_Cursor>
 8001302:	e00b      	b.n	800131c <LCD_4bit_Print_Char+0x38>
	else if (AddressDD == 32)
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <LCD_4bit_Print_Char+0x70>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b20      	cmp	r3, #32
 800130a:	d107      	bne.n	800131c <LCD_4bit_Print_Char+0x38>
	{
		LCD_4bit_Set_Cursor(LCD, 1, 1);
 800130c:	2201      	movs	r2, #1
 800130e:	2101      	movs	r1, #1
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff8d 	bl	8001230 <LCD_4bit_Set_Cursor>
		AddressDD = 0;
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <LCD_4bit_Print_Char+0x70>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
	}
	AddressDD++;
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <LCD_4bit_Print_Char+0x70>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <LCD_4bit_Print_Char+0x70>)
 8001326:	701a      	strb	r2, [r3, #0]
	// To Tell LCD That i will send Data Write RS HIGH @ref INFO (LCD.H)
	GPIO_WRITE_PIN(&(LCD->RS), HIGH);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2101      	movs	r1, #1
 800132c:	4618      	mov	r0, r3
 800132e:	f000 fcca 	bl	8001cc6 <GPIO_WRITE_PIN>
	// Send High Nibble on Data Wire
	Send_4bit(LCD, (Data>>4) & 0x0F);
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4619      	mov	r1, r3
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f8aa 	bl	8001494 <Send_4bit>
	// Send Low Nibble on Data Wire
	Send_4bit(LCD, Data);
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	4619      	mov	r1, r3
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f8a5 	bl	8001494 <Send_4bit>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000094 	.word	0x20000094

08001358 <LCD_4bit_Print>:

void LCD_4bit_Print(LCD_4bit_t *LCD, uint8_t *data){
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
	while(*data) LCD_4bit_Print_Char(LCD, *data++);
 8001362:	e007      	b.n	8001374 <LCD_4bit_Print+0x1c>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	603a      	str	r2, [r7, #0]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ffb8 	bl	80012e4 <LCD_4bit_Print_Char>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f3      	bne.n	8001364 <LCD_4bit_Print+0xc>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <LCD_4bit_Print_Fl_Number>:
	if (value < 0) str[length + 1] = '-';
	LCD_4bit_Print(LCD, str);
}

void LCD_4bit_Print_Fl_Number(LCD_4bit_t *LCD, float value, uint8_t N_digits)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b090      	sub	sp, #64	; 0x40
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	4613      	mov	r3, r2
 8001390:	71fb      	strb	r3, [r7, #7]
	uint8_t str[10] = {0};
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	811a      	strh	r2, [r3, #8]
	uint8_t strF[10]  = {0};
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	811a      	strh	r2, [r3, #8]
	uint32_t PWR = 1;
 80013aa:	2301      	movs	r3, #1
 80013ac:	63fb      	str	r3, [r7, #60]	; 0x3c

	// Befor Floating point
	// Extract integer part from float number
	int Decimal = (int)value;
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f7ff fdd8 	bl	8000f64 <__aeabi_f2iz>
 80013b4:	4603      	mov	r3, r0
 80013b6:	63bb      	str	r3, [r7, #56]	; 0x38
	// Conver integer part to string
	sprintf(str, "%d", Decimal);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013be:	4934      	ldr	r1, [pc, #208]	; (8001490 <LCD_4bit_Print_Fl_Number+0x10c>)
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 f997 	bl	80026f4 <siprintf>
	int length = strlen(str);
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7fe fed0 	bl	8000170 <strlen>
 80013d0:	4603      	mov	r3, r0
 80013d2:	633b      	str	r3, [r7, #48]	; 0x30
	if (Decimal < 0) str[length + 1] = '-';
 80013d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	da07      	bge.n	80013ea <LCD_4bit_Print_Fl_Number+0x66>
 80013da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013dc:	3301      	adds	r3, #1
 80013de:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80013e2:	4413      	add	r3, r2
 80013e4:	222d      	movs	r2, #45	; 0x2d
 80013e6:	f803 2c24 	strb.w	r2, [r3, #-36]
	LCD_4bit_Print(LCD, str);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f7ff ffb1 	bl	8001358 <LCD_4bit_Print>


	// After Floating point with N_digits
	// Extract fractional Part
	if (value < 0)
 80013f6:	f04f 0100 	mov.w	r1, #0
 80013fa:	68b8      	ldr	r0, [r7, #8]
 80013fc:	f7ff fd8a 	bl	8000f14 <__aeabi_fcmplt>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d006      	beq.n	8001414 <LCD_4bit_Print_Fl_Number+0x90>
	{
		value *= -1;
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800140c:	60bb      	str	r3, [r7, #8]
		Decimal *= -1;
 800140e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001410:	425b      	negs	r3, r3
 8001412:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	float Fraction = (float)value - (float)(Decimal);
 8001414:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001416:	f7ff fb8b 	bl	8000b30 <__aeabi_i2f>
 800141a:	4603      	mov	r3, r0
 800141c:	4619      	mov	r1, r3
 800141e:	68b8      	ldr	r0, [r7, #8]
 8001420:	f7ff fad0 	bl	80009c4 <__aeabi_fsub>
 8001424:	4603      	mov	r3, r0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Calculate 10 pwr N_digit
	for (int i = 0; i < N_digits; i++) PWR *= 10;
 8001428:	2300      	movs	r3, #0
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
 800142c:	e008      	b.n	8001440 <LCD_4bit_Print_Fl_Number+0xbc>
 800142e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800143a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143c:	3301      	adds	r3, #1
 800143e:	637b      	str	r3, [r7, #52]	; 0x34
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001444:	429a      	cmp	r2, r3
 8001446:	dbf2      	blt.n	800142e <LCD_4bit_Print_Fl_Number+0xaa>
	// Convert Fractional part to integer part with limit number of digit
	int FracToInt = (int)(Fraction * PWR);
 8001448:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800144a:	f7ff fb6d 	bl	8000b28 <__aeabi_ui2f>
 800144e:	4603      	mov	r3, r0
 8001450:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fbc0 	bl	8000bd8 <__aeabi_fmul>
 8001458:	4603      	mov	r3, r0
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fd82 	bl	8000f64 <__aeabi_f2iz>
 8001460:	4603      	mov	r3, r0
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28

    // Conver Fractional part to string after Turning into integer
    sprintf(strF, "%d", FracToInt);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800146a:	4909      	ldr	r1, [pc, #36]	; (8001490 <LCD_4bit_Print_Fl_Number+0x10c>)
 800146c:	4618      	mov	r0, r3
 800146e:	f001 f941 	bl	80026f4 <siprintf>
    // Print Floating Point
    LCD_4bit_Print_Char(LCD, '.');
 8001472:	212e      	movs	r1, #46	; 0x2e
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f7ff ff35 	bl	80012e4 <LCD_4bit_Print_Char>
    LCD_4bit_Print(LCD, strF);
 800147a:	f107 0310 	add.w	r3, r7, #16
 800147e:	4619      	mov	r1, r3
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f7ff ff69 	bl	8001358 <LCD_4bit_Print>
}
 8001486:	bf00      	nop
 8001488:	3740      	adds	r7, #64	; 0x40
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	08002f30 	.word	0x08002f30

08001494 <Send_4bit>:
	// Send Low Nibble on Data Wire
	Send_4bit(LCD, data);
}

static void Send_4bit(LCD_4bit_t *LCD, uint8_t _data_command)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	70fb      	strb	r3, [r7, #3]
	// Send 4bits data | command bit by bit
	for (char i = 0; i < 4; i++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	e012      	b.n	80014cc <Send_4bit+0x38>
	{
		GPIO_WRITE_PIN( &(LCD->Data[(int)i]), ((_data_command >> (int)i) & 0x01) );
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	3303      	adds	r3, #3
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	18d0      	adds	r0, r2, r3
 80014b0:	78fa      	ldrb	r2, [r7, #3]
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	fa42 f303 	asr.w	r3, r2, r3
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	4619      	mov	r1, r3
 80014c2:	f000 fc00 	bl	8001cc6 <GPIO_WRITE_PIN>
	for (char i = 0; i < 4; i++)
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	3301      	adds	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d9e9      	bls.n	80014a6 <Send_4bit+0x12>
	}
	// Enable Signal to Reccieve Data or Command
	GPIO_WRITE_PIN(&(LCD->EN), HIGH);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3308      	adds	r3, #8
 80014d6:	2101      	movs	r1, #1
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fbf4 	bl	8001cc6 <GPIO_WRITE_PIN>
	myWait(1);
 80014de:	2001      	movs	r0, #1
 80014e0:	f000 f81e 	bl	8001520 <myWait>
	GPIO_WRITE_PIN(&(LCD->EN), LOW);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3308      	adds	r3, #8
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 fbeb 	bl	8001cc6 <GPIO_WRITE_PIN>
	myWait(2);
 80014f0:	2002      	movs	r0, #2
 80014f2:	f000 f815 	bl	8001520 <myWait>
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <LCD_4bit_Clear>:
	// To Make Display OFF Without losing DDRAM Content on LDC
	LCD_4bit_Command(LCD, _LCD_DISPLAY_OFF);
}

void LCD_4bit_Clear(LCD_4bit_t *LCD)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
	// To Clear LCD & DDRAM Memory
	LCD_4bit_Command(LCD, _LCD_CLEAR);
 8001506:	2101      	movs	r1, #1
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fecf 	bl	80012ac <LCD_4bit_Command>
	LCD_4bit_Set_Cursor(LCD, 1, 1);
 800150e:	2201      	movs	r2, #1
 8001510:	2101      	movs	r1, #1
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff fe8c 	bl	8001230 <LCD_4bit_Set_Cursor>
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <myWait>:
}

#endif

static void myWait(volatile int ms)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	for (volatile int i = 0; i < ms; i++) for (volatile int j = 0; j < 255; j++);
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	e00b      	b.n	8001546 <myWait+0x26>
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	e002      	b.n	800153a <myWait+0x1a>
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	3301      	adds	r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	2bfe      	cmp	r3, #254	; 0xfe
 800153e:	ddf9      	ble.n	8001534 <myWait+0x14>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3301      	adds	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	429a      	cmp	r2, r3
 800154c:	dbef      	blt.n	800152e <myWait+0xe>

}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <Update>:

static void (* GP_IRQ[15])(void);


static void Update(EXIT_t *EXTI_Config)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	// 1- GPIO Init to be AF Input
	GPIO_PinConfig_t EXTI_PIN;
	EXTI_PIN.GPIOx = EXTI_Config->EXTI_PIN.GPIOx;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	60fb      	str	r3, [r7, #12]
	EXTI_PIN.GPIO_PinNumber = EXTI_Config->EXTI_PIN.Pin_Number;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	889b      	ldrh	r3, [r3, #4]
 800156a:	823b      	strh	r3, [r7, #16]
	EXTI_PIN.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 800156c:	2302      	movs	r3, #2
 800156e:	74fb      	strb	r3, [r7, #19]
	EXTI_PIN.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8001570:	2308      	movs	r3, #8
 8001572:	74bb      	strb	r3, [r7, #18]
	GPIO_INIT(&EXTI_PIN);
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	4618      	mov	r0, r3
 800157a:	f000 fb0c 	bl	8001b96 <GPIO_INIT>
	//-------------------------------------------

	// 2- Configure AFIO To Rout to EXTI Line With Portx
	// To get The Reg in Array without If Condition
	uint8_t AFIO_Index = (EXTI_Config->EXTI_PIN.EXTI_Line / 4);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	799b      	ldrb	r3, [r3, #6]
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	75fb      	strb	r3, [r7, #23]
	// To Get the Pos in Reg that i will write on it without if condition
	uint8_t AFIO_Bit_Pos = ((EXTI_Config->EXTI_PIN.EXTI_Line % 4) * 4);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	799b      	ldrb	r3, [r3, #6]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	75bb      	strb	r3, [r7, #22]
	// Clear EXTICRx Reg to write on it
	AFIO->EXTICR[AFIO_Index] &= ~(0XF << AFIO_Bit_Pos);
 8001594:	4a61      	ldr	r2, [pc, #388]	; (800171c <Update+0x1c4>)
 8001596:	7dfb      	ldrb	r3, [r7, #23]
 8001598:	3302      	adds	r3, #2
 800159a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800159e:	7dbb      	ldrb	r3, [r7, #22]
 80015a0:	210f      	movs	r1, #15
 80015a2:	fa01 f303 	lsl.w	r3, r1, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	4618      	mov	r0, r3
 80015aa:	495c      	ldr	r1, [pc, #368]	; (800171c <Update+0x1c4>)
 80015ac:	7dfb      	ldrb	r3, [r7, #23]
 80015ae:	4002      	ands	r2, r0
 80015b0:	3302      	adds	r3, #2
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// Writing On EXTICR Reg for Routing Pin as EXTI Line
	AFIO->EXTICR[AFIO_Index] |= ((AFIO_Mapping(EXTI_Config->EXTI_PIN.GPIOx) & 0xF) << AFIO_Bit_Pos);
 80015b6:	4a59      	ldr	r2, [pc, #356]	; (800171c <Update+0x1c4>)
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	3302      	adds	r3, #2
 80015bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4956      	ldr	r1, [pc, #344]	; (8001720 <Update+0x1c8>)
 80015c6:	428b      	cmp	r3, r1
 80015c8:	d016      	beq.n	80015f8 <Update+0xa0>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4955      	ldr	r1, [pc, #340]	; (8001724 <Update+0x1cc>)
 80015d0:	428b      	cmp	r3, r1
 80015d2:	d00f      	beq.n	80015f4 <Update+0x9c>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4953      	ldr	r1, [pc, #332]	; (8001728 <Update+0x1d0>)
 80015da:	428b      	cmp	r3, r1
 80015dc:	d008      	beq.n	80015f0 <Update+0x98>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4952      	ldr	r1, [pc, #328]	; (800172c <Update+0x1d4>)
 80015e4:	428b      	cmp	r3, r1
 80015e6:	d101      	bne.n	80015ec <Update+0x94>
 80015e8:	2303      	movs	r3, #3
 80015ea:	e006      	b.n	80015fa <Update+0xa2>
 80015ec:	2300      	movs	r3, #0
 80015ee:	e004      	b.n	80015fa <Update+0xa2>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e002      	b.n	80015fa <Update+0xa2>
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <Update+0xa2>
 80015f8:	2300      	movs	r3, #0
 80015fa:	7db9      	ldrb	r1, [r7, #22]
 80015fc:	408b      	lsls	r3, r1
 80015fe:	4618      	mov	r0, r3
 8001600:	4946      	ldr	r1, [pc, #280]	; (800171c <Update+0x1c4>)
 8001602:	7dfb      	ldrb	r3, [r7, #23]
 8001604:	4302      	orrs	r2, r0
 8001606:	3302      	adds	r3, #2
 8001608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//-------------------------------------------

	// 3- Update Rising or Falling Edge or both
	// Clearing it to Customize the function the user will choose
	EXTI->RTSR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_Line);
 800160c:	4b48      	ldr	r3, [pc, #288]	; (8001730 <Update+0x1d8>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	7992      	ldrb	r2, [r2, #6]
 8001614:	4611      	mov	r1, r2
 8001616:	2201      	movs	r2, #1
 8001618:	408a      	lsls	r2, r1
 800161a:	43d2      	mvns	r2, r2
 800161c:	4611      	mov	r1, r2
 800161e:	4a44      	ldr	r2, [pc, #272]	; (8001730 <Update+0x1d8>)
 8001620:	400b      	ands	r3, r1
 8001622:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_Line);
 8001624:	4b42      	ldr	r3, [pc, #264]	; (8001730 <Update+0x1d8>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	7992      	ldrb	r2, [r2, #6]
 800162c:	4611      	mov	r1, r2
 800162e:	2201      	movs	r2, #1
 8001630:	408a      	lsls	r2, r1
 8001632:	43d2      	mvns	r2, r2
 8001634:	4611      	mov	r1, r2
 8001636:	4a3e      	ldr	r2, [pc, #248]	; (8001730 <Update+0x1d8>)
 8001638:	400b      	ands	r3, r1
 800163a:	60d3      	str	r3, [r2, #12]

	if ( EXTI_Config->Detect_EXTI == RISING)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7b1b      	ldrb	r3, [r3, #12]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d10b      	bne.n	800165c <Update+0x104>
	{
		EXTI->RTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_Line);
 8001644:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <Update+0x1d8>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	7992      	ldrb	r2, [r2, #6]
 800164c:	4611      	mov	r1, r2
 800164e:	2201      	movs	r2, #1
 8001650:	408a      	lsls	r2, r1
 8001652:	4611      	mov	r1, r2
 8001654:	4a36      	ldr	r2, [pc, #216]	; (8001730 <Update+0x1d8>)
 8001656:	430b      	orrs	r3, r1
 8001658:	6093      	str	r3, [r2, #8]
 800165a:	e029      	b.n	80016b0 <Update+0x158>
	}
	else if (EXTI_Config->Detect_EXTI == FALLING)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7b1b      	ldrb	r3, [r3, #12]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d10b      	bne.n	800167c <Update+0x124>
	{
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_Line);
 8001664:	4b32      	ldr	r3, [pc, #200]	; (8001730 <Update+0x1d8>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	7992      	ldrb	r2, [r2, #6]
 800166c:	4611      	mov	r1, r2
 800166e:	2201      	movs	r2, #1
 8001670:	408a      	lsls	r2, r1
 8001672:	4611      	mov	r1, r2
 8001674:	4a2e      	ldr	r2, [pc, #184]	; (8001730 <Update+0x1d8>)
 8001676:	430b      	orrs	r3, r1
 8001678:	60d3      	str	r3, [r2, #12]
 800167a:	e019      	b.n	80016b0 <Update+0x158>
	}
	else if (EXTI_Config->Detect_EXTI == RISING_FALLING)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7b1b      	ldrb	r3, [r3, #12]
 8001680:	2b03      	cmp	r3, #3
 8001682:	d115      	bne.n	80016b0 <Update+0x158>
	{
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_Line);
 8001684:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <Update+0x1d8>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	7992      	ldrb	r2, [r2, #6]
 800168c:	4611      	mov	r1, r2
 800168e:	2201      	movs	r2, #1
 8001690:	408a      	lsls	r2, r1
 8001692:	4611      	mov	r1, r2
 8001694:	4a26      	ldr	r2, [pc, #152]	; (8001730 <Update+0x1d8>)
 8001696:	430b      	orrs	r3, r1
 8001698:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_Line);
 800169a:	4b25      	ldr	r3, [pc, #148]	; (8001730 <Update+0x1d8>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	7992      	ldrb	r2, [r2, #6]
 80016a2:	4611      	mov	r1, r2
 80016a4:	2201      	movs	r2, #1
 80016a6:	408a      	lsls	r2, r1
 80016a8:	4611      	mov	r1, r2
 80016aa:	4a21      	ldr	r2, [pc, #132]	; (8001730 <Update+0x1d8>)
 80016ac:	430b      	orrs	r3, r1
 80016ae:	6093      	str	r3, [r2, #8]
	}
	//-------------------------------------------

	// 4- Store the address of Function Call back you need to execute while EXTI Line happen
	GP_IRQ[EXTI_Config->EXTI_PIN.EXTI_Line] = EXTI_Config->PF_IRQ;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	799b      	ldrb	r3, [r3, #6]
 80016b4:	4619      	mov	r1, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <Update+0x1dc>)
 80016bc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//-------------------------------------------

	// 5- Enable Mask for NVIC And EXTI to Receive IRQ
	if (EXTI_Config->IRQ_EN == EN_EXTI)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7b5b      	ldrb	r3, [r3, #13]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d110      	bne.n	80016ea <Update+0x192>
	{
		EXTI->IMR |= (1 << EXTI_Config->EXTI_PIN.EXTI_Line);
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <Update+0x1d8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	7992      	ldrb	r2, [r2, #6]
 80016d0:	4611      	mov	r1, r2
 80016d2:	2201      	movs	r2, #1
 80016d4:	408a      	lsls	r2, r1
 80016d6:	4611      	mov	r1, r2
 80016d8:	4a15      	ldr	r2, [pc, #84]	; (8001730 <Update+0x1d8>)
 80016da:	430b      	orrs	r3, r1
 80016dc:	6013      	str	r3, [r2, #0]
		EN_NVIC(EXTI_Config->EXTI_PIN.EXTI_Line);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	799b      	ldrb	r3, [r3, #6]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f834 	bl	8001750 <EN_NVIC>
	{
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_Line);
		DIS_NVIC(EXTI_Config->EXTI_PIN.EXTI_Line);
	}
	//-------------------------------------------
}
 80016e8:	e014      	b.n	8001714 <Update+0x1bc>
	else if (EXTI_Config->IRQ_EN == DIS_EXTI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7b5b      	ldrb	r3, [r3, #13]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d110      	bne.n	8001714 <Update+0x1bc>
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_Line);
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <Update+0x1d8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	7992      	ldrb	r2, [r2, #6]
 80016fa:	4611      	mov	r1, r2
 80016fc:	2201      	movs	r2, #1
 80016fe:	408a      	lsls	r2, r1
 8001700:	43d2      	mvns	r2, r2
 8001702:	4611      	mov	r1, r2
 8001704:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <Update+0x1d8>)
 8001706:	400b      	ands	r3, r1
 8001708:	6013      	str	r3, [r2, #0]
		DIS_NVIC(EXTI_Config->EXTI_PIN.EXTI_Line);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	799b      	ldrb	r3, [r3, #6]
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f87e 	bl	8001810 <DIS_NVIC>
}
 8001714:	bf00      	nop
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40021000 	.word	0x40021000
 8001720:	40010800 	.word	0x40010800
 8001724:	40010c00 	.word	0x40010c00
 8001728:	40011000 	.word	0x40011000
 800172c:	40011400 	.word	0x40011400
 8001730:	40010400 	.word	0x40010400
 8001734:	20000098 	.word	0x20000098

08001738 <EXTI_Init>:

void EXTI_Init(EXIT_t *EXTI_Config)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	Update(EXTI_Config);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ff09 	bl	8001558 <Update>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <EN_NVIC>:
	NVIC_Disable_EXTI5_9;
	NVIC_Disable_EXTI10_15;
}

static void EN_NVIC(uint8_t Line)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
	switch (Line)
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d84d      	bhi.n	80017fc <EN_NVIC+0xac>
 8001760:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <EN_NVIC+0x18>)
 8001762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001766:	bf00      	nop
 8001768:	080017a9 	.word	0x080017a9
 800176c:	080017b7 	.word	0x080017b7
 8001770:	080017fd 	.word	0x080017fd
 8001774:	080017c5 	.word	0x080017c5
 8001778:	080017d3 	.word	0x080017d3
 800177c:	080017e1 	.word	0x080017e1
 8001780:	080017e1 	.word	0x080017e1
 8001784:	080017e1 	.word	0x080017e1
 8001788:	080017e1 	.word	0x080017e1
 800178c:	080017e1 	.word	0x080017e1
 8001790:	080017ef 	.word	0x080017ef
 8001794:	080017ef 	.word	0x080017ef
 8001798:	080017ef 	.word	0x080017ef
 800179c:	080017ef 	.word	0x080017ef
 80017a0:	080017ef 	.word	0x080017ef
 80017a4:	080017ef 	.word	0x080017ef
	{
	case 0:
		NVIC_Enable_EXTI0;break;
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <EN_NVIC+0xb8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a16      	ldr	r2, [pc, #88]	; (8001808 <EN_NVIC+0xb8>)
 80017ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	e023      	b.n	80017fe <EN_NVIC+0xae>
	case 1:
		NVIC_Enable_EXTI1;break;
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <EN_NVIC+0xb8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a13      	ldr	r2, [pc, #76]	; (8001808 <EN_NVIC+0xb8>)
 80017bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	e01c      	b.n	80017fe <EN_NVIC+0xae>
	case 3:
		NVIC_Enable_EXTI3;break;
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <EN_NVIC+0xb8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0f      	ldr	r2, [pc, #60]	; (8001808 <EN_NVIC+0xb8>)
 80017ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	e015      	b.n	80017fe <EN_NVIC+0xae>
	case 4:
		NVIC_Enable_EXTI4;break;
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <EN_NVIC+0xb8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a0c      	ldr	r2, [pc, #48]	; (8001808 <EN_NVIC+0xb8>)
 80017d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	e00e      	b.n	80017fe <EN_NVIC+0xae>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_Enable_EXTI5_9;break;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <EN_NVIC+0xb8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a08      	ldr	r2, [pc, #32]	; (8001808 <EN_NVIC+0xb8>)
 80017e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	e007      	b.n	80017fe <EN_NVIC+0xae>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_Enable_EXTI10_15;break;
 80017ee:	4b07      	ldr	r3, [pc, #28]	; (800180c <EN_NVIC+0xbc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a06      	ldr	r2, [pc, #24]	; (800180c <EN_NVIC+0xbc>)
 80017f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e000      	b.n	80017fe <EN_NVIC+0xae>
	default: break;
 80017fc:	bf00      	nop
	}
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	e000e100 	.word	0xe000e100
 800180c:	e000e104 	.word	0xe000e104

08001810 <DIS_NVIC>:

static void DIS_NVIC(uint8_t Line)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
	switch (Line)
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2b0f      	cmp	r3, #15
 800181e:	d84d      	bhi.n	80018bc <DIS_NVIC+0xac>
 8001820:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <DIS_NVIC+0x18>)
 8001822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001826:	bf00      	nop
 8001828:	08001869 	.word	0x08001869
 800182c:	08001877 	.word	0x08001877
 8001830:	080018bd 	.word	0x080018bd
 8001834:	08001885 	.word	0x08001885
 8001838:	08001893 	.word	0x08001893
 800183c:	080018a1 	.word	0x080018a1
 8001840:	080018a1 	.word	0x080018a1
 8001844:	080018a1 	.word	0x080018a1
 8001848:	080018a1 	.word	0x080018a1
 800184c:	080018a1 	.word	0x080018a1
 8001850:	080018af 	.word	0x080018af
 8001854:	080018af 	.word	0x080018af
 8001858:	080018af 	.word	0x080018af
 800185c:	080018af 	.word	0x080018af
 8001860:	080018af 	.word	0x080018af
 8001864:	080018af 	.word	0x080018af
	{
	case 0:
		NVIC_Disable_EXTI0;break;
 8001868:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <DIS_NVIC+0xb8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a16      	ldr	r2, [pc, #88]	; (80018c8 <DIS_NVIC+0xb8>)
 800186e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	e023      	b.n	80018be <DIS_NVIC+0xae>
	case 1:
		NVIC_Disable_EXTI1;break;
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <DIS_NVIC+0xb8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <DIS_NVIC+0xb8>)
 800187c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e01c      	b.n	80018be <DIS_NVIC+0xae>
	case 3:
		NVIC_Disable_EXTI3;break;
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <DIS_NVIC+0xb8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <DIS_NVIC+0xb8>)
 800188a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	e015      	b.n	80018be <DIS_NVIC+0xae>
	case 4:
		NVIC_Disable_EXTI4;break;
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <DIS_NVIC+0xb8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a0c      	ldr	r2, [pc, #48]	; (80018c8 <DIS_NVIC+0xb8>)
 8001898:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e00e      	b.n	80018be <DIS_NVIC+0xae>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_Disable_EXTI5_9;break;
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <DIS_NVIC+0xb8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a08      	ldr	r2, [pc, #32]	; (80018c8 <DIS_NVIC+0xb8>)
 80018a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	e007      	b.n	80018be <DIS_NVIC+0xae>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_Disable_EXTI10_15;break;
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <DIS_NVIC+0xbc>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a06      	ldr	r2, [pc, #24]	; (80018cc <DIS_NVIC+0xbc>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e000      	b.n	80018be <DIS_NVIC+0xae>
	default: break;
 80018bc:	bf00      	nop
	}
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	e000e180 	.word	0xe000e180
 80018cc:	e000e184 	.word	0xe000e184

080018d0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	EXTI->PR |= 1<<EXTI0;
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <EXTI0_IRQHandler+0x1c>)
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <EXTI0_IRQHandler+0x1c>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6153      	str	r3, [r2, #20]
	GP_IRQ[0]();
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <EXTI0_IRQHandler+0x20>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4798      	blx	r3
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40010400 	.word	0x40010400
 80018f0:	20000098 	.word	0x20000098

080018f4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	EXTI->PR |= 1<<EXTI1;
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <EXTI1_IRQHandler+0x1c>)
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	4a04      	ldr	r2, [pc, #16]	; (8001910 <EXTI1_IRQHandler+0x1c>)
 80018fe:	f043 0302 	orr.w	r3, r3, #2
 8001902:	6153      	str	r3, [r2, #20]
	GP_IRQ[1]();
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <EXTI1_IRQHandler+0x20>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	4798      	blx	r3
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40010400 	.word	0x40010400
 8001914:	20000098 	.word	0x20000098

08001918 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	EXTI->PR |= 1<<EXTI2;
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <EXTI2_IRQHandler+0x1c>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <EXTI2_IRQHandler+0x1c>)
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	6153      	str	r3, [r2, #20]
	GP_IRQ[2]();
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <EXTI2_IRQHandler+0x20>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	4798      	blx	r3
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40010400 	.word	0x40010400
 8001938:	20000098 	.word	0x20000098

0800193c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	EXTI->PR |= 1<<EXTI3;
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <EXTI3_IRQHandler+0x1c>)
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <EXTI3_IRQHandler+0x1c>)
 8001946:	f043 0308 	orr.w	r3, r3, #8
 800194a:	6153      	str	r3, [r2, #20]
	GP_IRQ[3]();
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <EXTI3_IRQHandler+0x20>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4798      	blx	r3
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40010400 	.word	0x40010400
 800195c:	20000098 	.word	0x20000098

08001960 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	EXTI->PR |= 1<<EXTI4;
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <EXTI4_IRQHandler+0x1c>)
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <EXTI4_IRQHandler+0x1c>)
 800196a:	f043 0310 	orr.w	r3, r3, #16
 800196e:	6153      	str	r3, [r2, #20]
	GP_IRQ[4]();
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <EXTI4_IRQHandler+0x20>)
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	4798      	blx	r3
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40010400 	.word	0x40010400
 8001980:	20000098 	.word	0x20000098

08001984 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	if (EXTI->PR & 1<<5){	EXTI->PR |= 1<<EXTI5;	GP_IRQ[5]();}
 8001988:	4b26      	ldr	r3, [pc, #152]	; (8001a24 <EXTI9_5_IRQHandler+0xa0>)
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	f003 0320 	and.w	r3, r3, #32
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <EXTI9_5_IRQHandler+0x22>
 8001994:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <EXTI9_5_IRQHandler+0xa0>)
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	4a22      	ldr	r2, [pc, #136]	; (8001a24 <EXTI9_5_IRQHandler+0xa0>)
 800199a:	f043 0320 	orr.w	r3, r3, #32
 800199e:	6153      	str	r3, [r2, #20]
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <EXTI9_5_IRQHandler+0xa4>)
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	4798      	blx	r3
	if (EXTI->PR & 1<<6){	EXTI->PR |= 1<<EXTI6;	GP_IRQ[6]();}
 80019a6:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <EXTI9_5_IRQHandler+0xa0>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d008      	beq.n	80019c4 <EXTI9_5_IRQHandler+0x40>
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <EXTI9_5_IRQHandler+0xa0>)
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	4a1b      	ldr	r2, [pc, #108]	; (8001a24 <EXTI9_5_IRQHandler+0xa0>)
 80019b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019bc:	6153      	str	r3, [r2, #20]
 80019be:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <EXTI9_5_IRQHandler+0xa4>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	4798      	blx	r3
	if (EXTI->PR & 1<<7){	EXTI->PR |= 1<<EXTI7;	GP_IRQ[7]();}
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <EXTI9_5_IRQHandler+0xa0>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d008      	beq.n	80019e2 <EXTI9_5_IRQHandler+0x5e>
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <EXTI9_5_IRQHandler+0xa0>)
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <EXTI9_5_IRQHandler+0xa0>)
 80019d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019da:	6153      	str	r3, [r2, #20]
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <EXTI9_5_IRQHandler+0xa4>)
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	4798      	blx	r3
	if (EXTI->PR & 1<<8){	EXTI->PR |= 1<<EXTI8;	GP_IRQ[8]();}
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <EXTI9_5_IRQHandler+0xa0>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d008      	beq.n	8001a00 <EXTI9_5_IRQHandler+0x7c>
 80019ee:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <EXTI9_5_IRQHandler+0xa0>)
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <EXTI9_5_IRQHandler+0xa0>)
 80019f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f8:	6153      	str	r3, [r2, #20]
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <EXTI9_5_IRQHandler+0xa4>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	4798      	blx	r3
	if (EXTI->PR & 1<<9){	EXTI->PR |= 1<<EXTI9;	GP_IRQ[9]();}
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <EXTI9_5_IRQHandler+0xa0>)
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d008      	beq.n	8001a1e <EXTI9_5_IRQHandler+0x9a>
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <EXTI9_5_IRQHandler+0xa0>)
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <EXTI9_5_IRQHandler+0xa0>)
 8001a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a16:	6153      	str	r3, [r2, #20]
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <EXTI9_5_IRQHandler+0xa4>)
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	4798      	blx	r3
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40010400 	.word	0x40010400
 8001a28:	20000098 	.word	0x20000098

08001a2c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	if (EXTI->PR & 1<<10){	EXTI->PR |= 1<<EXTI10;	GP_IRQ[10]();}
 8001a30:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <EXTI15_10_IRQHandler+0xbc>)
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <EXTI15_10_IRQHandler+0x22>
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <EXTI15_10_IRQHandler+0xbc>)
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	4a29      	ldr	r2, [pc, #164]	; (8001ae8 <EXTI15_10_IRQHandler+0xbc>)
 8001a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a46:	6153      	str	r3, [r2, #20]
 8001a48:	4b28      	ldr	r3, [pc, #160]	; (8001aec <EXTI15_10_IRQHandler+0xc0>)
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4c:	4798      	blx	r3
	if (EXTI->PR & 1<<11){	EXTI->PR |= 1<<EXTI11;	GP_IRQ[11]();}
 8001a4e:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <EXTI15_10_IRQHandler+0xbc>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d008      	beq.n	8001a6c <EXTI15_10_IRQHandler+0x40>
 8001a5a:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <EXTI15_10_IRQHandler+0xbc>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	4a22      	ldr	r2, [pc, #136]	; (8001ae8 <EXTI15_10_IRQHandler+0xbc>)
 8001a60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a64:	6153      	str	r3, [r2, #20]
 8001a66:	4b21      	ldr	r3, [pc, #132]	; (8001aec <EXTI15_10_IRQHandler+0xc0>)
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	4798      	blx	r3
	if (EXTI->PR & 1<<12){	EXTI->PR |= 1<<EXTI12;	GP_IRQ[12]();}
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <EXTI15_10_IRQHandler+0xbc>)
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <EXTI15_10_IRQHandler+0x5e>
 8001a78:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <EXTI15_10_IRQHandler+0xbc>)
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ae8 <EXTI15_10_IRQHandler+0xbc>)
 8001a7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a82:	6153      	str	r3, [r2, #20]
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <EXTI15_10_IRQHandler+0xc0>)
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	4798      	blx	r3
	if (EXTI->PR & 1<<13){	EXTI->PR |= 1<<EXTI13;	GP_IRQ[13]();}
 8001a8a:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <EXTI15_10_IRQHandler+0xbc>)
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d008      	beq.n	8001aa8 <EXTI15_10_IRQHandler+0x7c>
 8001a96:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <EXTI15_10_IRQHandler+0xbc>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <EXTI15_10_IRQHandler+0xbc>)
 8001a9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001aa0:	6153      	str	r3, [r2, #20]
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <EXTI15_10_IRQHandler+0xc0>)
 8001aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa6:	4798      	blx	r3
	if (EXTI->PR & 1<<14){	EXTI->PR |= 1<<EXTI14;	GP_IRQ[14]();}
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <EXTI15_10_IRQHandler+0xbc>)
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <EXTI15_10_IRQHandler+0x9a>
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <EXTI15_10_IRQHandler+0xbc>)
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <EXTI15_10_IRQHandler+0xbc>)
 8001aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001abe:	6153      	str	r3, [r2, #20]
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <EXTI15_10_IRQHandler+0xc0>)
 8001ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac4:	4798      	blx	r3
	if (EXTI->PR & 1<<15){	EXTI->PR |= 1<<EXTI15;	GP_IRQ[15]();}
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <EXTI15_10_IRQHandler+0xbc>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d008      	beq.n	8001ae4 <EXTI15_10_IRQHandler+0xb8>
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <EXTI15_10_IRQHandler+0xbc>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <EXTI15_10_IRQHandler+0xbc>)
 8001ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001adc:	6153      	str	r3, [r2, #20]
 8001ade:	4b03      	ldr	r3, [pc, #12]	; (8001aec <EXTI15_10_IRQHandler+0xc0>)
 8001ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae2:	4798      	blx	r3
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40010400 	.word	0x40010400
 8001aec:	20000098 	.word	0x20000098

08001af0 <GetPos>:
							/*************************************/
							/*       Function Definition         */
							/*************************************/

uint8_t GetPos(PINy_t PinNumber)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	2b80      	cmp	r3, #128	; 0x80
 8001afe:	d042      	beq.n	8001b86 <GetPos+0x96>
 8001b00:	2b80      	cmp	r3, #128	; 0x80
 8001b02:	dc11      	bgt.n	8001b28 <GetPos+0x38>
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d036      	beq.n	8001b76 <GetPos+0x86>
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	dc06      	bgt.n	8001b1a <GetPos+0x2a>
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d02e      	beq.n	8001b6e <GetPos+0x7e>
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d02e      	beq.n	8001b72 <GetPos+0x82>
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d028      	beq.n	8001b6a <GetPos+0x7a>
 8001b18:	e037      	b.n	8001b8a <GetPos+0x9a>
 8001b1a:	2b20      	cmp	r3, #32
 8001b1c:	d02f      	beq.n	8001b7e <GetPos+0x8e>
 8001b1e:	2b40      	cmp	r3, #64	; 0x40
 8001b20:	d02f      	beq.n	8001b82 <GetPos+0x92>
 8001b22:	2b10      	cmp	r3, #16
 8001b24:	d029      	beq.n	8001b7a <GetPos+0x8a>
 8001b26:	e030      	b.n	8001b8a <GetPos+0x9a>
 8001b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b2c:	d023      	beq.n	8001b76 <GetPos+0x86>
 8001b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b32:	dc09      	bgt.n	8001b48 <GetPos+0x58>
 8001b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b38:	d019      	beq.n	8001b6e <GetPos+0x7e>
 8001b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b3e:	d018      	beq.n	8001b72 <GetPos+0x82>
 8001b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b44:	d011      	beq.n	8001b6a <GetPos+0x7a>
 8001b46:	e020      	b.n	8001b8a <GetPos+0x9a>
 8001b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b4c:	d017      	beq.n	8001b7e <GetPos+0x8e>
 8001b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b52:	dc03      	bgt.n	8001b5c <GetPos+0x6c>
 8001b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b58:	d00f      	beq.n	8001b7a <GetPos+0x8a>
 8001b5a:	e016      	b.n	8001b8a <GetPos+0x9a>
 8001b5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b60:	d00f      	beq.n	8001b82 <GetPos+0x92>
 8001b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b66:	d00e      	beq.n	8001b86 <GetPos+0x96>
 8001b68:	e00f      	b.n	8001b8a <GetPos+0x9a>
	{
	case GPIO_PIN0 :
	case GPIO_PIN8 :
		return 0; break;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e00e      	b.n	8001b8c <GetPos+0x9c>
	case GPIO_PIN1 :
	case GPIO_PIN9 :
		return 4; break;
 8001b6e:	2304      	movs	r3, #4
 8001b70:	e00c      	b.n	8001b8c <GetPos+0x9c>
	case GPIO_PIN2 :
	case GPIO_PIN10:
		return 8; break;
 8001b72:	2308      	movs	r3, #8
 8001b74:	e00a      	b.n	8001b8c <GetPos+0x9c>
	case GPIO_PIN3 :
	case GPIO_PIN11:
		return 12; break;
 8001b76:	230c      	movs	r3, #12
 8001b78:	e008      	b.n	8001b8c <GetPos+0x9c>
	case GPIO_PIN4 :
	case GPIO_PIN12:
		return 16; break;
 8001b7a:	2310      	movs	r3, #16
 8001b7c:	e006      	b.n	8001b8c <GetPos+0x9c>
	case GPIO_PIN5 :
	case GPIO_PIN13:
		return 20; break;
 8001b7e:	2314      	movs	r3, #20
 8001b80:	e004      	b.n	8001b8c <GetPos+0x9c>
	case GPIO_PIN6 :
	case GPIO_PIN14:
		return 24; break;
 8001b82:	2318      	movs	r3, #24
 8001b84:	e002      	b.n	8001b8c <GetPos+0x9c>
	case GPIO_PIN7 :
	case GPIO_PIN15:
		return 28; break;
 8001b86:	231c      	movs	r3, #28
 8001b88:	e000      	b.n	8001b8c <GetPos+0x9c>
	default :
		return 0; break;
 8001b8a:	2300      	movs	r3, #0
	}
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <GPIO_INIT>:

void GPIO_INIT(GPIO_PinConfig_t *myPin)
{
 8001b96:	b590      	push	{r4, r7, lr}
 8001b98:	b085      	sub	sp, #20
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
	volatile uint32_t *configReg = NULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Config = 0x0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	73fb      	strb	r3, [r7, #15]
	configReg = (myPin->GPIO_PinNumber < GPIO_PIN8) ? (&(myPin->GPIOx->CRL)) : (&(myPin->GPIOx->CRH));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	889b      	ldrh	r3, [r3, #4]
 8001baa:	2bff      	cmp	r3, #255	; 0xff
 8001bac:	d802      	bhi.n	8001bb4 <GPIO_INIT+0x1e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	e002      	b.n	8001bba <GPIO_INIT+0x24>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	60bb      	str	r3, [r7, #8]
	// Clear CNF0[1:0] MODE0[1:0]
	(*configReg) &= ~(0xF << GetPos(myPin->GPIO_PinNumber));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	889b      	ldrh	r3, [r3, #4]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff95 	bl	8001af0 <GetPos>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	461a      	mov	r2, r3
 8001bca:	230f      	movs	r3, #15
 8001bcc:	4093      	lsls	r3, r2
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	601a      	str	r2, [r3, #0]

	if ( (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	799b      	ldrb	r3, [r3, #6]
 8001bde:	2b07      	cmp	r3, #7
 8001be0:	d00b      	beq.n	8001bfa <GPIO_INIT+0x64>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	799b      	ldrb	r3, [r3, #6]
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d007      	beq.n	8001bfa <GPIO_INIT+0x64>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	799b      	ldrb	r3, [r3, #6]
 8001bee:	2b05      	cmp	r3, #5
 8001bf0:	d003      	beq.n	8001bfa <GPIO_INIT+0x64>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	799b      	ldrb	r3, [r3, #6]
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d10e      	bne.n	8001c18 <GPIO_INIT+0x82>
	{
		// Set CNF0[1:0] -> (his mode)  MODE0[1:0] -> 00
		Pin_Config = ((((myPin->GPIO_MODE - 4) << 2) | (myPin->GPIO_OUTPUT_Speed)) & 0x0F);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	799b      	ldrb	r3, [r3, #6]
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	b25a      	sxtb	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	79db      	ldrb	r3, [r3, #7]
 8001c08:	b25b      	sxtb	r3, r3
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	b25b      	sxtb	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	e030      	b.n	8001c7a <GPIO_INIT+0xe4>
	}
	else
	{
		if (myPin->GPIO_MODE == GPIO_MODE_INPUT_AF) // Considered input Floating
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	799b      	ldrb	r3, [r3, #6]
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d102      	bne.n	8001c26 <GPIO_INIT+0x90>
		{
			Pin_Config = ((GPIO_MODE_INPUT_FLO << 2 | 0x0) & 0x0F);
 8001c20:	2304      	movs	r3, #4
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	e029      	b.n	8001c7a <GPIO_INIT+0xe4>
		}
		else if (myPin->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	799b      	ldrb	r3, [r3, #6]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d10c      	bne.n	8001c48 <GPIO_INIT+0xb2>
		{
			Pin_Config = ((GPIO_MODE_INPUT_PU << 2 | 0x0) & 0x0F);
 8001c2e:	2308      	movs	r3, #8
 8001c30:	73fb      	strb	r3, [r7, #15]
			//From Table 20. Port bit configuration table-> Set ODR->1 to set pin as Input Pull Up
			myPin->GPIOx->ODR |= (myPin->GPIO_PinNumber);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	889b      	ldrh	r3, [r3, #4]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	e018      	b.n	8001c7a <GPIO_INIT+0xe4>
		}
		else if (myPin->GPIO_MODE == GPIO_MODE_INPUT_PD)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	799b      	ldrb	r3, [r3, #6]
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d10d      	bne.n	8001c6c <GPIO_INIT+0xd6>
		{
			Pin_Config = ((GPIO_MODE_INPUT_PU << 2) & 0x0F);
 8001c50:	2308      	movs	r3, #8
 8001c52:	73fb      	strb	r3, [r7, #15]
			//From Table 20. Port bit configuration table-> Set ODR->0 to set pin as Input Pull Down
			myPin->GPIOx->ODR &= ~(myPin->GPIO_PinNumber);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	889b      	ldrh	r3, [r3, #4]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	4619      	mov	r1, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	400a      	ands	r2, r1
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	e006      	b.n	8001c7a <GPIO_INIT+0xe4>
		}
		else
		{
			Pin_Config = ((myPin->GPIO_MODE << 2 | 0x0) & 0x0F);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	799b      	ldrb	r3, [r3, #6]
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	73fb      	strb	r3, [r7, #15]
		}
	}
	// Writing on CRL OR CRH Reg
	(*configReg) |= ((Pin_Config) << GetPos(myPin->GPIO_PinNumber));
 8001c7a:	7bfc      	ldrb	r4, [r7, #15]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	889b      	ldrh	r3, [r3, #4]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff35 	bl	8001af0 <GetPos>
 8001c86:	4603      	mov	r3, r0
 8001c88:	fa04 f203 	lsl.w	r2, r4, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	601a      	str	r2, [r3, #0]
}
 8001c96:	bf00      	nop
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd90      	pop	{r4, r7, pc}

08001c9e <GPIO_READ_PIN>:

uint8_t GPIO_READ_PIN(GPIO_PinConfig_t *myPin)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
	if (myPin->GPIOx->IDR & myPin->GPIO_PinNumber) return 1;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	8892      	ldrh	r2, [r2, #4]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <GPIO_READ_PIN+0x1c>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <GPIO_READ_PIN+0x1e>
	return 0;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <GPIO_WRITE_PIN>:
{
	return ((uint16_t)GPIOx->IDR);
}

void GPIO_WRITE_PIN(GPIO_PinConfig_t *myPin, Logic_t Mode)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	70fb      	strb	r3, [r7, #3]
	if (Mode) myPin->GPIOx->ODR |= (myPin->GPIO_PinNumber);
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00a      	beq.n	8001cee <GPIO_WRITE_PIN+0x28>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	889b      	ldrh	r3, [r3, #4]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	60da      	str	r2, [r3, #12]
	else      myPin->GPIOx->ODR &= ~(myPin->GPIO_PinNumber);
}
 8001cec:	e00a      	b.n	8001d04 <GPIO_WRITE_PIN+0x3e>
	else      myPin->GPIOx->ODR &= ~(myPin->GPIO_PinNumber);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	889b      	ldrh	r3, [r3, #4]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	400a      	ands	r2, r1
 8001d02:	60da      	str	r2, [r3, #12]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
	...

08001d10 <Precedence>:

//Functions Definitions

// Get Precedence of Operators
static uint8_t Precedence(uint8_t Operator)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
	switch (Operator)
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	3b2a      	subs	r3, #42	; 0x2a
 8001d1e:	2b05      	cmp	r3, #5
 8001d20:	d812      	bhi.n	8001d48 <Precedence+0x38>
 8001d22:	a201      	add	r2, pc, #4	; (adr r2, 8001d28 <Precedence+0x18>)
 8001d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d28:	08001d41 	.word	0x08001d41
 8001d2c:	08001d45 	.word	0x08001d45
 8001d30:	08001d49 	.word	0x08001d49
 8001d34:	08001d45 	.word	0x08001d45
 8001d38:	08001d49 	.word	0x08001d49
 8001d3c:	08001d41 	.word	0x08001d41
	{
	case '*' :
	case '/' : return 2;
 8001d40:	2302      	movs	r3, #2
 8001d42:	e001      	b.n	8001d48 <Precedence+0x38>
	case '+' :
	case '-' : return 1;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e7ff      	b.n	8001d48 <Precedence+0x38>
	}
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop

08001d54 <Calc_init>:

// Init Pins for LCD, Keypad and EXTI
void Calc_init(void)
{
 8001d54:	b590      	push	{r4, r7, lr}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
	// Enable CLK FOR GPIO B
	RCC_GPIOB_CLK_EN;
 8001d5a:	4b48      	ldr	r3, [pc, #288]	; (8001e7c <Calc_init+0x128>)
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	4a47      	ldr	r2, [pc, #284]	; (8001e7c <Calc_init+0x128>)
 8001d60:	f043 0308 	orr.w	r3, r3, #8
 8001d64:	6193      	str	r3, [r2, #24]
	// Enable CLK FOR GPIO A
	RCC_GPIOA_CLK_EN;
 8001d66:	4b45      	ldr	r3, [pc, #276]	; (8001e7c <Calc_init+0x128>)
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	4a44      	ldr	r2, [pc, #272]	; (8001e7c <Calc_init+0x128>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	6193      	str	r3, [r2, #24]
	// Enable CLK FOR AFIO
	RCC_AFIO_CLK_EN;
 8001d72:	4b42      	ldr	r3, [pc, #264]	; (8001e7c <Calc_init+0x128>)
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	4a41      	ldr	r2, [pc, #260]	; (8001e7c <Calc_init+0x128>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6193      	str	r3, [r2, #24]

	// Init LCD
	lcd.RS.GPIOx = GPIOA;
 8001d7e:	4b40      	ldr	r3, [pc, #256]	; (8001e80 <Calc_init+0x12c>)
 8001d80:	4a40      	ldr	r2, [pc, #256]	; (8001e84 <Calc_init+0x130>)
 8001d82:	601a      	str	r2, [r3, #0]
	lcd.RS.GPIO_PinNumber = GPIO_PIN15;
 8001d84:	4b3e      	ldr	r3, [pc, #248]	; (8001e80 <Calc_init+0x12c>)
 8001d86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d8a:	809a      	strh	r2, [r3, #4]
	lcd.EN.GPIOx = GPIOA;
 8001d8c:	4b3c      	ldr	r3, [pc, #240]	; (8001e80 <Calc_init+0x12c>)
 8001d8e:	4a3d      	ldr	r2, [pc, #244]	; (8001e84 <Calc_init+0x130>)
 8001d90:	609a      	str	r2, [r3, #8]
	lcd.EN.GPIO_PinNumber = GPIO_PIN12;
 8001d92:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <Calc_init+0x12c>)
 8001d94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d98:	819a      	strh	r2, [r3, #12]
	lcd.Data[0].GPIOx = GPIOA;
 8001d9a:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <Calc_init+0x12c>)
 8001d9c:	4a39      	ldr	r2, [pc, #228]	; (8001e84 <Calc_init+0x130>)
 8001d9e:	619a      	str	r2, [r3, #24]
	lcd.Data[0].GPIO_PinNumber = GPIO_PIN11;
 8001da0:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <Calc_init+0x12c>)
 8001da2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001da6:	839a      	strh	r2, [r3, #28]
	lcd.Data[1].GPIOx = GPIOA;
 8001da8:	4b35      	ldr	r3, [pc, #212]	; (8001e80 <Calc_init+0x12c>)
 8001daa:	4a36      	ldr	r2, [pc, #216]	; (8001e84 <Calc_init+0x130>)
 8001dac:	621a      	str	r2, [r3, #32]
	lcd.Data[1].GPIO_PinNumber = GPIO_PIN10;
 8001dae:	4b34      	ldr	r3, [pc, #208]	; (8001e80 <Calc_init+0x12c>)
 8001db0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001db4:	849a      	strh	r2, [r3, #36]	; 0x24
	lcd.Data[2].GPIOx = GPIOA;
 8001db6:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <Calc_init+0x12c>)
 8001db8:	4a32      	ldr	r2, [pc, #200]	; (8001e84 <Calc_init+0x130>)
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
	lcd.Data[2].GPIO_PinNumber = GPIO_PIN9;
 8001dbc:	4b30      	ldr	r3, [pc, #192]	; (8001e80 <Calc_init+0x12c>)
 8001dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc2:	859a      	strh	r2, [r3, #44]	; 0x2c
	lcd.Data[3].GPIOx = GPIOA;
 8001dc4:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <Calc_init+0x12c>)
 8001dc6:	4a2f      	ldr	r2, [pc, #188]	; (8001e84 <Calc_init+0x130>)
 8001dc8:	631a      	str	r2, [r3, #48]	; 0x30
	lcd.Data[3].GPIO_PinNumber = GPIO_PIN8;
 8001dca:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <Calc_init+0x12c>)
 8001dcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd0:	869a      	strh	r2, [r3, #52]	; 0x34
	LCD_4bit_init(&lcd);
 8001dd2:	482b      	ldr	r0, [pc, #172]	; (8001e80 <Calc_init+0x12c>)
 8001dd4:	f7ff f9ba 	bl	800114c <LCD_4bit_init>
	// End

	// Init Keypad
	key.ROW[0].GPIO_PinNumber = GPIO_PIN11;
 8001dd8:	4b2b      	ldr	r3, [pc, #172]	; (8001e88 <Calc_init+0x134>)
 8001dda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dde:	809a      	strh	r2, [r3, #4]
	key.ROW[0].GPIOx = GPIOB;
 8001de0:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <Calc_init+0x134>)
 8001de2:	4a2a      	ldr	r2, [pc, #168]	; (8001e8c <Calc_init+0x138>)
 8001de4:	601a      	str	r2, [r3, #0]
	key.ROW[1].GPIO_PinNumber = GPIO_PIN10;
 8001de6:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <Calc_init+0x134>)
 8001de8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dec:	819a      	strh	r2, [r3, #12]
	key.ROW[1].GPIOx = GPIOB;
 8001dee:	4b26      	ldr	r3, [pc, #152]	; (8001e88 <Calc_init+0x134>)
 8001df0:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <Calc_init+0x138>)
 8001df2:	609a      	str	r2, [r3, #8]
	key.ROW[2].GPIO_PinNumber = GPIO_PIN1;
 8001df4:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <Calc_init+0x134>)
 8001df6:	2202      	movs	r2, #2
 8001df8:	829a      	strh	r2, [r3, #20]
	key.ROW[2].GPIOx = GPIOB;
 8001dfa:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <Calc_init+0x134>)
 8001dfc:	4a23      	ldr	r2, [pc, #140]	; (8001e8c <Calc_init+0x138>)
 8001dfe:	611a      	str	r2, [r3, #16]
	key.ROW[3].GPIO_PinNumber = GPIO_PIN0;
 8001e00:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <Calc_init+0x134>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	839a      	strh	r2, [r3, #28]
	key.ROW[3].GPIOx = GPIOB;
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <Calc_init+0x134>)
 8001e08:	4a20      	ldr	r2, [pc, #128]	; (8001e8c <Calc_init+0x138>)
 8001e0a:	619a      	str	r2, [r3, #24]
	key.COL[0].GPIO_PinNumber = GPIO_PIN4;
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <Calc_init+0x134>)
 8001e0e:	2210      	movs	r2, #16
 8001e10:	849a      	strh	r2, [r3, #36]	; 0x24
	key.COL[0].GPIOx = GPIOA;
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <Calc_init+0x134>)
 8001e14:	4a1b      	ldr	r2, [pc, #108]	; (8001e84 <Calc_init+0x130>)
 8001e16:	621a      	str	r2, [r3, #32]
	key.COL[1].GPIO_PinNumber = GPIO_PIN3;
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <Calc_init+0x134>)
 8001e1a:	2208      	movs	r2, #8
 8001e1c:	859a      	strh	r2, [r3, #44]	; 0x2c
	key.COL[1].GPIOx = GPIOA;
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <Calc_init+0x134>)
 8001e20:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <Calc_init+0x130>)
 8001e22:	629a      	str	r2, [r3, #40]	; 0x28
	key.COL[2].GPIO_PinNumber = GPIO_PIN2;
 8001e24:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <Calc_init+0x134>)
 8001e26:	2204      	movs	r2, #4
 8001e28:	869a      	strh	r2, [r3, #52]	; 0x34
	key.COL[2].GPIOx = GPIOA;
 8001e2a:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <Calc_init+0x134>)
 8001e2c:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <Calc_init+0x130>)
 8001e2e:	631a      	str	r2, [r3, #48]	; 0x30
	key.COL[3].GPIO_PinNumber = GPIO_PIN1;
 8001e30:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <Calc_init+0x134>)
 8001e32:	2202      	movs	r2, #2
 8001e34:	879a      	strh	r2, [r3, #60]	; 0x3c
	key.COL[3].GPIOx = GPIOA;
 8001e36:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <Calc_init+0x134>)
 8001e38:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <Calc_init+0x130>)
 8001e3a:	639a      	str	r2, [r3, #56]	; 0x38
	const uint8_t Char[KEYPAD_ROW_][KEYPAD_COL_] = {{'7', '8', '9', '/'},
 8001e3c:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <Calc_init+0x13c>)
 8001e3e:	463c      	mov	r4, r7
 8001e40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
													{'4', '5', '6', '*'},
													{'1', '2', '3', '-'},
													{'.', '0', '=', '+'}};
	Key_Init(&key, Char);
 8001e46:	463b      	mov	r3, r7
 8001e48:	4619      	mov	r1, r3
 8001e4a:	480f      	ldr	r0, [pc, #60]	; (8001e88 <Calc_init+0x134>)
 8001e4c:	f7ff f8b0 	bl	8000fb0 <Key_Init>
	// End

	// Init External Interrupt
	exti.EXTI_PIN = EXTI0PA0;
 8001e50:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <Calc_init+0x140>)
 8001e52:	4a11      	ldr	r2, [pc, #68]	; (8001e98 <Calc_init+0x144>)
 8001e54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e58:	e883 0003 	stmia.w	r3, {r0, r1}
	exti.Detect_EXTI = FALLING;
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <Calc_init+0x140>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	731a      	strb	r2, [r3, #12]
	exti.IRQ_EN = EN_EXTI;
 8001e62:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <Calc_init+0x140>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	735a      	strb	r2, [r3, #13]
	exti.PF_IRQ = Reset;
 8001e68:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <Calc_init+0x140>)
 8001e6a:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <Calc_init+0x148>)
 8001e6c:	609a      	str	r2, [r3, #8]
	EXTI_Init(&exti);
 8001e6e:	4809      	ldr	r0, [pc, #36]	; (8001e94 <Calc_init+0x140>)
 8001e70:	f7ff fc62 	bl	8001738 <EXTI_Init>
	// End
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd90      	pop	{r4, r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	20000144 	.word	0x20000144
 8001e84:	40010800 	.word	0x40010800
 8001e88:	2000018c 	.word	0x2000018c
 8001e8c:	40010c00 	.word	0x40010c00
 8001e90:	08002f34 	.word	0x08002f34
 8001e94:	2000017c 	.word	0x2000017c
 8001e98:	08002f44 	.word	0x08002f44
 8001e9c:	080024f9 	.word	0x080024f9

08001ea0 <Calc>:


void Calc(uint8_t *Equ)
{
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b0a1      	sub	sp, #132	; 0x84
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	Stack_Char stack_t;
	Char_init(&stack_t);
 8001ea8:	f107 030c 	add.w	r3, r7, #12
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 fa85 	bl	80023bc <Char_init>
	// Local Counters
	int j = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	67fb      	str	r3, [r7, #124]	; 0x7c
	int i = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	67bb      	str	r3, [r7, #120]	; 0x78
	while (Equ[j] != '\0')
 8001eba:	e074      	b.n	8001fa6 <Calc+0x106>
	{
		uint8_t Current = Equ[j];
 8001ebc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		// Check Digit or not
		if ((Current <= '9' && Current >= '0') || Current == '.' )
 8001ec8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001ecc:	2b39      	cmp	r3, #57	; 0x39
 8001ece:	d803      	bhi.n	8001ed8 <Calc+0x38>
 8001ed0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001ed4:	2b2f      	cmp	r3, #47	; 0x2f
 8001ed6:	d814      	bhi.n	8001f02 <Calc+0x62>
 8001ed8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001edc:	2b2e      	cmp	r3, #46	; 0x2e
 8001ede:	d134      	bne.n	8001f4a <Calc+0xaa>
		{
			while ((Current <= '9' && Current >= '0') || Current == '.' )
 8001ee0:	e00f      	b.n	8001f02 <Calc+0x62>
			{
				Postfix[i++] = Current;
 8001ee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	67ba      	str	r2, [r7, #120]	; 0x78
 8001ee8:	4944      	ldr	r1, [pc, #272]	; (8001ffc <Calc+0x15c>)
 8001eea:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8001eee:	54ca      	strb	r2, [r1, r3]
				Current = Equ[++j];
 8001ef0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ef6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	4413      	add	r3, r2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			while ((Current <= '9' && Current >= '0') || Current == '.' )
 8001f02:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001f06:	2b39      	cmp	r3, #57	; 0x39
 8001f08:	d803      	bhi.n	8001f12 <Calc+0x72>
 8001f0a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001f0e:	2b2f      	cmp	r3, #47	; 0x2f
 8001f10:	d8e7      	bhi.n	8001ee2 <Calc+0x42>
 8001f12:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001f16:	2b2e      	cmp	r3, #46	; 0x2e
 8001f18:	d0e3      	beq.n	8001ee2 <Calc+0x42>
			}
			Postfix[i++] = ' ';
 8001f1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	67ba      	str	r2, [r7, #120]	; 0x78
 8001f20:	4a36      	ldr	r2, [pc, #216]	; (8001ffc <Calc+0x15c>)
 8001f22:	2120      	movs	r1, #32
 8001f24:	54d1      	strb	r1, [r2, r3]
 8001f26:	e03e      	b.n	8001fa6 <Calc+0x106>
		}
		else
		{
			while(!(Char_isEmpty(&stack_t)) && Precedence(Current) <= Precedence(Char_Top(&stack_t)))
			{
				Postfix[i++] = Char_Top(&stack_t);
 8001f28:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8001f2a:	1c63      	adds	r3, r4, #1
 8001f2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f2e:	f107 030c 	add.w	r3, r7, #12
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 fa8f 	bl	8002456 <Char_Top>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b2f      	ldr	r3, [pc, #188]	; (8001ffc <Calc+0x15c>)
 8001f3e:	551a      	strb	r2, [r3, r4]
				Char_Pop(&stack_t);
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fa78 	bl	800243a <Char_Pop>
			while(!(Char_isEmpty(&stack_t)) && Precedence(Current) <= Precedence(Char_Top(&stack_t)))
 8001f4a:	f107 030c 	add.w	r3, r7, #12
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 fa40 	bl	80023d4 <Char_isEmpty>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d112      	bne.n	8001f80 <Calc+0xe0>
 8001f5a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fed6 	bl	8001d10 <Precedence>
 8001f64:	4603      	mov	r3, r0
 8001f66:	461c      	mov	r4, r3
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 fa72 	bl	8002456 <Char_Top>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fecb 	bl	8001d10 <Precedence>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	429c      	cmp	r4, r3
 8001f7e:	d9d3      	bls.n	8001f28 <Calc+0x88>
			}
			if (!Char_isFull(&stack_t))
 8001f80:	f107 030c 	add.w	r3, r7, #12
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 fa35 	bl	80023f4 <Char_isFull>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d107      	bne.n	8001fa0 <Calc+0x100>
			{
				Char_Push(&stack_t, Current);
 8001f90:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	4611      	mov	r1, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 fa3a 	bl	8002414 <Char_Push>
			}
			j++;
 8001fa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	67fb      	str	r3, [r7, #124]	; 0x7c
	while (Equ[j] != '\0')
 8001fa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	4413      	add	r3, r2
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d184      	bne.n	8001ebc <Calc+0x1c>
		}
	}
	while (!Char_isEmpty(&stack_t))
 8001fb2:	e010      	b.n	8001fd6 <Calc+0x136>
	{
		Postfix[i++] = Char_Top(&stack_t);
 8001fb4:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8001fb6:	1c63      	adds	r3, r4, #1
 8001fb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8001fba:	f107 030c 	add.w	r3, r7, #12
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fa49 	bl	8002456 <Char_Top>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <Calc+0x15c>)
 8001fca:	551a      	strb	r2, [r3, r4]
		Char_Pop(&stack_t);
 8001fcc:	f107 030c 	add.w	r3, r7, #12
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fa32 	bl	800243a <Char_Pop>
	while (!Char_isEmpty(&stack_t))
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 f9fa 	bl	80023d4 <Char_isEmpty>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0e6      	beq.n	8001fb4 <Calc+0x114>
	}
	Postfix[i] = '\0';
 8001fe6:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <Calc+0x15c>)
 8001fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fea:	4413      	add	r3, r2
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
	evaluate();
 8001ff0:	f000 f806 	bl	8002000 <evaluate>
}
 8001ff4:	bf00      	nop
 8001ff6:	3784      	adds	r7, #132	; 0x84
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd90      	pop	{r4, r7, pc}
 8001ffc:	200000d4 	.word	0x200000d4

08002000 <evaluate>:

static void evaluate(void)
{
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b0f1      	sub	sp, #452	; 0x1c4
 8002004:	af00      	add	r7, sp, #0
	Stack_Float stack_t;
	Float_init(&stack_t);
 8002006:	463b      	mov	r3, r7
 8002008:	4618      	mov	r0, r3
 800200a:	f000 fa32 	bl	8002472 <Float_init>

	int i = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	uint32_t Num = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	uint8_t Sympol = ' ';
 800201a:	2320      	movs	r3, #32
 800201c:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
	uint8_t Check = 1;
 8002020:	2301      	movs	r3, #1
 8002022:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
	uint8_t temp = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
	float Operand1, Operand2;
	float Res;
	float Float_Num = 0;
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	uint8_t Flag_repeat = 1;
 8002034:	2301      	movs	r3, #1
 8002036:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
	uint8_t Flag_Div_0 = 1;
 800203a:	2301      	movs	r3, #1
 800203c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
//	uint8_t Flag_Floating = 0;
	while (Postfix[i] != '\0')
 8002040:	e107      	b.n	8002252 <evaluate+0x252>
	{
		uint8_t Current = Postfix[i];
 8002042:	4aa7      	ldr	r2, [pc, #668]	; (80022e0 <evaluate+0x2e0>)
 8002044:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002048:	4413      	add	r3, r2
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad

		if (Current <= '9' && Current >= '0')
 8002050:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8002054:	2b39      	cmp	r3, #57	; 0x39
 8002056:	f200 80b2 	bhi.w	80021be <evaluate+0x1be>
 800205a:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 800205e:	2b2f      	cmp	r3, #47	; 0x2f
 8002060:	f240 80ad 	bls.w	80021be <evaluate+0x1be>
		{
			while (Current <= '9' && Current >= '0')
 8002064:	e018      	b.n	8002098 <evaluate+0x98>
			{
				Num = (Num * 10) + (int)(Current - '0');
 8002066:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	461a      	mov	r2, r3
 8002074:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8002078:	4413      	add	r3, r2
 800207a:	3b30      	subs	r3, #48	; 0x30
 800207c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
				Current = Postfix[++i];
 8002080:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002084:	3301      	adds	r3, #1
 8002086:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800208a:	4a95      	ldr	r2, [pc, #596]	; (80022e0 <evaluate+0x2e0>)
 800208c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002090:	4413      	add	r3, r2
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
			while (Current <= '9' && Current >= '0')
 8002098:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 800209c:	2b39      	cmp	r3, #57	; 0x39
 800209e:	d803      	bhi.n	80020a8 <evaluate+0xa8>
 80020a0:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80020a4:	2b2f      	cmp	r3, #47	; 0x2f
 80020a6:	d8de      	bhi.n	8002066 <evaluate+0x66>
			}
			if (Current == '.' && Flag_repeat == 1)
 80020a8:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80020ac:	2b2e      	cmp	r3, #46	; 0x2e
 80020ae:	d15d      	bne.n	800216c <evaluate+0x16c>
 80020b0:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d159      	bne.n	800216c <evaluate+0x16c>
			{
				Current = Postfix[++i];
 80020b8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80020bc:	3301      	adds	r3, #1
 80020be:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80020c2:	4a87      	ldr	r2, [pc, #540]	; (80022e0 <evaluate+0x2e0>)
 80020c4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80020c8:	4413      	add	r3, r2
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
				if (temp != Check)
 80020d0:	f897 21b6 	ldrb.w	r2, [r7, #438]	; 0x1b6
 80020d4:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 80020d8:	429a      	cmp	r2, r3
 80020da:	d043      	beq.n	8002164 <evaluate+0x164>
				{
					float j = 0.1;
 80020dc:	4b81      	ldr	r3, [pc, #516]	; (80022e4 <evaluate+0x2e4>)
 80020de:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
					while (Current <= '9' && Current >= '0')
 80020e2:	e032      	b.n	800214a <evaluate+0x14a>
					{
						Float_Num +=  ((Current - '0') * j) ;
 80020e4:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80020e8:	3b30      	subs	r3, #48	; 0x30
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fd20 	bl	8000b30 <__aeabi_i2f>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fd6e 	bl	8000bd8 <__aeabi_fmul>
 80020fc:	4603      	mov	r3, r0
 80020fe:	4619      	mov	r1, r3
 8002100:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 8002104:	f7fe fc60 	bl	80009c8 <__addsf3>
 8002108:	4603      	mov	r3, r0
 800210a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
						Current = Postfix[++i];
 800210e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002112:	3301      	adds	r3, #1
 8002114:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002118:	4a71      	ldr	r2, [pc, #452]	; (80022e0 <evaluate+0x2e0>)
 800211a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800211e:	4413      	add	r3, r2
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						j *= 0.1;
 8002126:	f8d7 01a8 	ldr.w	r0, [r7, #424]	; 0x1a8
 800212a:	f7fe f98d 	bl	8000448 <__aeabi_f2d>
 800212e:	a36a      	add	r3, pc, #424	; (adr r3, 80022d8 <evaluate+0x2d8>)
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	f7fe f9e0 	bl	80004f8 <__aeabi_dmul>
 8002138:	4603      	mov	r3, r0
 800213a:	460c      	mov	r4, r1
 800213c:	4618      	mov	r0, r3
 800213e:	4621      	mov	r1, r4
 8002140:	f7fe fbec 	bl	800091c <__aeabi_d2f>
 8002144:	4603      	mov	r3, r0
 8002146:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
					while (Current <= '9' && Current >= '0')
 800214a:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 800214e:	2b39      	cmp	r3, #57	; 0x39
 8002150:	d803      	bhi.n	800215a <evaluate+0x15a>
 8002152:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8002156:	2b2f      	cmp	r3, #47	; 0x2f
 8002158:	d8c4      	bhi.n	80020e4 <evaluate+0xe4>
					}
					temp = Check;
 800215a:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 800215e:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 8002162:	e003      	b.n	800216c <evaluate+0x16c>
				}
				else {
					Flag_repeat = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
					break;
 800216a:	e07c      	b.n	8002266 <evaluate+0x266>
				}
			}
			if (Current == ' ')
 800216c:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8002170:	2b20      	cmp	r3, #32
 8002172:	d16e      	bne.n	8002252 <evaluate+0x252>
			{
				Float_Num += (float)Num;
 8002174:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8002178:	f7fe fcd6 	bl	8000b28 <__aeabi_ui2f>
 800217c:	4603      	mov	r3, r0
 800217e:	4619      	mov	r1, r3
 8002180:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 8002184:	f7fe fc20 	bl	80009c8 <__addsf3>
 8002188:	4603      	mov	r3, r0
 800218a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
				Check++;
 800218e:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8002192:	3301      	adds	r3, #1
 8002194:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
				Float_Push(&stack_t, Float_Num);
 8002198:	463b      	mov	r3, r7
 800219a:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f974 	bl	800248c <Float_Push>
				Num = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
				Float_Num = 0;
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
				i++;
 80021b2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80021b6:	3301      	adds	r3, #1
 80021b8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
				continue;
 80021bc:	e049      	b.n	8002252 <evaluate+0x252>
			}
		}
		else
		{
			Sympol = Current;
 80021be:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80021c2:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			Operand2 = Float_Top(&stack_t);
 80021c6:	463b      	mov	r3, r7
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 f984 	bl	80024d6 <Float_Top>
 80021ce:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
			Float_Pop(&stack_t);
 80021d2:	463b      	mov	r3, r7
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 f96e 	bl	80024b6 <Float_Pop>
			Operand1 = Float_Top(&stack_t);
 80021da:	463b      	mov	r3, r7
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 f97a 	bl	80024d6 <Float_Top>
 80021e2:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
			Float_Pop(&stack_t);
 80021e6:	463b      	mov	r3, r7
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 f964 	bl	80024b6 <Float_Pop>
			if (Sympol == '/' && Operand2 == 0)
 80021ee:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80021f2:	2b2f      	cmp	r3, #47	; 0x2f
 80021f4:	d115      	bne.n	8002222 <evaluate+0x222>
 80021f6:	f04f 0100 	mov.w	r1, #0
 80021fa:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 80021fe:	f7fe fe7f 	bl	8000f00 <__aeabi_fcmpeq>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00c      	beq.n	8002222 <evaluate+0x222>
			{
				LCD_4bit_Set_Cursor(&lcd, 2, 2);
 8002208:	2202      	movs	r2, #2
 800220a:	2102      	movs	r1, #2
 800220c:	4836      	ldr	r0, [pc, #216]	; (80022e8 <evaluate+0x2e8>)
 800220e:	f7ff f80f 	bl	8001230 <LCD_4bit_Set_Cursor>
				LCD_4bit_Print(&lcd, "Error Div by 0");
 8002212:	4936      	ldr	r1, [pc, #216]	; (80022ec <evaluate+0x2ec>)
 8002214:	4834      	ldr	r0, [pc, #208]	; (80022e8 <evaluate+0x2e8>)
 8002216:	f7ff f89f 	bl	8001358 <LCD_4bit_Print>
				Flag_Div_0 = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8002220:	e013      	b.n	800224a <evaluate+0x24a>
			}
			else
			{
				Float_Push(&stack_t, Calc_res(Operand1, Operand2, Sympol));
 8002222:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8002226:	461a      	mov	r2, r3
 8002228:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 800222c:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8002230:	f000 f860 	bl	80022f4 <Calc_res>
 8002234:	4602      	mov	r2, r0
 8002236:	463b      	mov	r3, r7
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f000 f926 	bl	800248c <Float_Push>
				i++;
 8002240:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002244:	3301      	adds	r3, #1
 8002246:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
			}
			if (!Flag_Div_0) break;
 800224a:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800224e:	2b00      	cmp	r3, #0
 8002250:	d008      	beq.n	8002264 <evaluate+0x264>
	while (Postfix[i] != '\0')
 8002252:	4a23      	ldr	r2, [pc, #140]	; (80022e0 <evaluate+0x2e0>)
 8002254:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002258:	4413      	add	r3, r2
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	f47f aef0 	bne.w	8002042 <evaluate+0x42>
 8002262:	e000      	b.n	8002266 <evaluate+0x266>
			if (!Flag_Div_0) break;
 8002264:	bf00      	nop
		}
	}
	if (Flag_Div_0 && Flag_repeat)
 8002266:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800226a:	2b00      	cmp	r3, #0
 800226c:	d025      	beq.n	80022ba <evaluate+0x2ba>
 800226e:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8002272:	2b00      	cmp	r3, #0
 8002274:	d021      	beq.n	80022ba <evaluate+0x2ba>
	{
		Res = Float_Top(&stack_t);
 8002276:	463b      	mov	r3, r7
 8002278:	4618      	mov	r0, r3
 800227a:	f000 f92c 	bl	80024d6 <Float_Top>
 800227e:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
		Float_Pop(&stack_t);
 8002282:	463b      	mov	r3, r7
 8002284:	4618      	mov	r0, r3
 8002286:	f000 f916 	bl	80024b6 <Float_Pop>
		int length = Get_Length(Res);
 800228a:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 800228e:	f000 f867 	bl	8002360 <Get_Length>
 8002292:	4603      	mov	r3, r0
 8002294:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
		LCD_4bit_Set_Cursor(&lcd, 2, 16-(length + 2));
 8002298:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800229c:	b2db      	uxtb	r3, r3
 800229e:	f1c3 030e 	rsb	r3, r3, #14
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	2102      	movs	r1, #2
 80022a8:	480f      	ldr	r0, [pc, #60]	; (80022e8 <evaluate+0x2e8>)
 80022aa:	f7fe ffc1 	bl	8001230 <LCD_4bit_Set_Cursor>
		LCD_4bit_Print_Fl_Number(&lcd, Res, 2);
 80022ae:	2202      	movs	r2, #2
 80022b0:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 80022b4:	480c      	ldr	r0, [pc, #48]	; (80022e8 <evaluate+0x2e8>)
 80022b6:	f7ff f865 	bl	8001384 <LCD_4bit_Print_Fl_Number>
	}
	while(ISR);
 80022ba:	bf00      	nop
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <evaluate+0x2f0>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1fa      	bne.n	80022bc <evaluate+0x2bc>
	ISR = 1;
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <evaluate+0x2f0>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
}
 80022cc:	bf00      	nop
 80022ce:	f507 77e2 	add.w	r7, r7, #452	; 0x1c4
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd90      	pop	{r4, r7, pc}
 80022d6:	bf00      	nop
 80022d8:	9999999a 	.word	0x9999999a
 80022dc:	3fb99999 	.word	0x3fb99999
 80022e0:	200000d4 	.word	0x200000d4
 80022e4:	3dcccccd 	.word	0x3dcccccd
 80022e8:	20000144 	.word	0x20000144
 80022ec:	08002f4c 	.word	0x08002f4c
 80022f0:	20000000 	.word	0x20000000

080022f4 <Calc_res>:

// Calculate Res and printing on LCD
static float Calc_res(float Num1, float Num2, uint8_t sympol)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	4613      	mov	r3, r2
 8002300:	71fb      	strb	r3, [r7, #7]
	switch(sympol)
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	3b2a      	subs	r3, #42	; 0x2a
 8002306:	2b05      	cmp	r3, #5
 8002308:	d826      	bhi.n	8002358 <Calc_res+0x64>
 800230a:	a201      	add	r2, pc, #4	; (adr r2, 8002310 <Calc_res+0x1c>)
 800230c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002310:	08002341 	.word	0x08002341
 8002314:	08002329 	.word	0x08002329
 8002318:	08002359 	.word	0x08002359
 800231c:	08002335 	.word	0x08002335
 8002320:	08002359 	.word	0x08002359
 8002324:	0800234d 	.word	0x0800234d
	{
	case '+':
		return Num1 + Num2;
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f7fe fb4c 	bl	80009c8 <__addsf3>
 8002330:	4603      	mov	r3, r0
 8002332:	e011      	b.n	8002358 <Calc_res+0x64>
		break;
	case '-':
		return Num1 - Num2;
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f7fe fb44 	bl	80009c4 <__aeabi_fsub>
 800233c:	4603      	mov	r3, r0
 800233e:	e00b      	b.n	8002358 <Calc_res+0x64>
		break;
	case '*':
		return Num1 * Num2;
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f7fe fc48 	bl	8000bd8 <__aeabi_fmul>
 8002348:	4603      	mov	r3, r0
 800234a:	e005      	b.n	8002358 <Calc_res+0x64>
		break;
	case '/':
		return Num1 / Num2;
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f7fe fcf6 	bl	8000d40 <__aeabi_fdiv>
 8002354:	4603      	mov	r3, r0
 8002356:	e7ff      	b.n	8002358 <Calc_res+0x64>
	default : break;
	}
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <Get_Length>:

static uint8_t Get_Length(float Number)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	uint8_t str[10] = {0};
 8002368:	f107 0310 	add.w	r3, r7, #16
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	811a      	strh	r2, [r3, #8]
	int Decimal;
	Decimal = (int)Number;
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7fe fdf5 	bl	8000f64 <__aeabi_f2iz>
 800237a:	4603      	mov	r3, r0
 800237c:	61fb      	str	r3, [r7, #28]
	sprintf(str, "%d", Decimal);
 800237e:	f107 0310 	add.w	r3, r7, #16
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	490c      	ldr	r1, [pc, #48]	; (80023b8 <Get_Length+0x58>)
 8002386:	4618      	mov	r0, r3
 8002388:	f000 f9b4 	bl	80026f4 <siprintf>
	volatile uint8_t length = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
	while(str[length++] != '\0');
 8002390:	bf00      	nop
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	73fa      	strb	r2, [r7, #15]
 800239c:	f107 0220 	add.w	r2, r7, #32
 80023a0:	4413      	add	r3, r2
 80023a2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f3      	bne.n	8002392 <Get_Length+0x32>
	return length;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	b2db      	uxtb	r3, r3
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3720      	adds	r7, #32
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	08002f5c 	.word	0x08002f5c

080023bc <Char_init>:


/*  Helper Stack Functions For Char Stack */
static void Char_init(Stack_Char *List)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	List->Top = 0;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <Char_isEmpty>:

static uint8_t Char_isEmpty (Stack_Char *List)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
	return List->Top == 0;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf0c      	ite	eq
 80023e4:	2301      	moveq	r3, #1
 80023e6:	2300      	movne	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <Char_isFull>:

static uint8_t Char_isFull (Stack_Char *List)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
	return List->Top >= MAX;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002400:	2b63      	cmp	r3, #99	; 0x63
 8002402:	bfcc      	ite	gt
 8002404:	2301      	movgt	r3, #1
 8002406:	2300      	movle	r3, #0
 8002408:	b2db      	uxtb	r3, r3
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <Char_Push>:

static void Char_Push(Stack_Char * List, uint8_t Data)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
	List->Data[(List->Top)++] = Data;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002424:	1c59      	adds	r1, r3, #1
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6651      	str	r1, [r2, #100]	; 0x64
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	78f9      	ldrb	r1, [r7, #3]
 800242e:	54d1      	strb	r1, [r2, r3]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <Char_Pop>:

static void Char_Pop(Stack_Char * List)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
	(List->Top)--;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002446:	1e5a      	subs	r2, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <Char_Top>:

static uint8_t Char_Top(Stack_Char *List)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
	return (List->Data[List->Top - 1]);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002462:	3b01      	subs	r3, #1
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	5cd3      	ldrb	r3, [r2, r3]
}
 8002468:	4618      	mov	r0, r3
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <Float_init>:
//    END

/*  Helper Stack Functions For Float Stack */
static void Float_init(Stack_Float *List)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
	List->Top = 0;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <Float_Push>:
{
	return List->Top >= MAX;
}

static void Float_Push(Stack_Float * List, float Data)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
	List->Data[(List->Top)++] = Data;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800249c:	1c59      	adds	r1, r3, #1
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6839      	ldr	r1, [r7, #0]
 80024a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <Float_Pop>:

static void Float_Pop(Stack_Float * List)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
	(List->Top)--;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80024c4:	1e5a      	subs	r2, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <Float_Top>:

static float Float_Top(Stack_Float *List)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
	return (List->Data[List->Top - 1]);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80024e4:	1e5a      	subs	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
	...

080024f8 <Reset>:
//       END

// Reset All Var I Used
void Reset(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
	LCD_4bit_Clear(&lcd);
 80024fe:	4815      	ldr	r0, [pc, #84]	; (8002554 <Reset+0x5c>)
 8002500:	f7fe fffd 	bl	80014fe <LCD_4bit_Clear>
	LCD_4bit_Command(&lcd, _LCD_RETURN_HOME);
 8002504:	2102      	movs	r1, #2
 8002506:	4813      	ldr	r0, [pc, #76]	; (8002554 <Reset+0x5c>)
 8002508:	f7fe fed0 	bl	80012ac <LCD_4bit_Command>
	ISR = 0;
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <Reset+0x60>)
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++) Operation[i] = '\0';
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	e007      	b.n	8002528 <Reset+0x30>
 8002518:	4a10      	ldr	r2, [pc, #64]	; (800255c <Reset+0x64>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3301      	adds	r3, #1
 8002526:	607b      	str	r3, [r7, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b0f      	cmp	r3, #15
 800252c:	ddf4      	ble.n	8002518 <Reset+0x20>
	for (int i = 0; i < 100; i++) Postfix[i] = '\0';
 800252e:	2300      	movs	r3, #0
 8002530:	603b      	str	r3, [r7, #0]
 8002532:	e007      	b.n	8002544 <Reset+0x4c>
 8002534:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <Reset+0x68>)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	4413      	add	r3, r2
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	3301      	adds	r3, #1
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2b63      	cmp	r3, #99	; 0x63
 8002548:	ddf4      	ble.n	8002534 <Reset+0x3c>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000144 	.word	0x20000144
 8002558:	20000000 	.word	0x20000000
 800255c:	200001cc 	.word	0x200001cc
 8002560:	200000d4 	.word	0x200000d4

08002564 <main>:




int main(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
	Calc_init();
 800256a:	f7ff fbf3 	bl	8001d54 <Calc_init>
	uint8_t i = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
//
//		LCD_4bit_Set_Cursor(&lcd, 1, 1);
//		LCD_4bit_Print_Fl_Number(&lcd, -5.8, 3);
		uint8_t press = Key_get(&key);
 8002572:	4818      	ldr	r0, [pc, #96]	; (80025d4 <main+0x70>)
 8002574:	f7fe fd8c 	bl	8001090 <Key_get>
 8002578:	4603      	mov	r3, r0
 800257a:	71bb      	strb	r3, [r7, #6]

		if (press != ' ' && press != '=')
 800257c:	79bb      	ldrb	r3, [r7, #6]
 800257e:	2b20      	cmp	r3, #32
 8002580:	d01f      	beq.n	80025c2 <main+0x5e>
 8002582:	79bb      	ldrb	r3, [r7, #6]
 8002584:	2b3d      	cmp	r3, #61	; 0x3d
 8002586:	d01c      	beq.n	80025c2 <main+0x5e>
		{
			if (i < 60) Operation[i++] = press;
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	2b3b      	cmp	r3, #59	; 0x3b
 800258c:	d806      	bhi.n	800259c <main+0x38>
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	71fa      	strb	r2, [r7, #7]
 8002594:	4619      	mov	r1, r3
 8002596:	4a10      	ldr	r2, [pc, #64]	; (80025d8 <main+0x74>)
 8002598:	79bb      	ldrb	r3, [r7, #6]
 800259a:	5453      	strb	r3, [r2, r1]
			if (!(i%16))
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d106      	bne.n	80025b6 <main+0x52>
			{
				i = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	71fb      	strb	r3, [r7, #7]
				LCD_4bit_Set_Cursor(&lcd, 1, 1);
 80025ac:	2201      	movs	r2, #1
 80025ae:	2101      	movs	r1, #1
 80025b0:	480a      	ldr	r0, [pc, #40]	; (80025dc <main+0x78>)
 80025b2:	f7fe fe3d 	bl	8001230 <LCD_4bit_Set_Cursor>
			}
			LCD_4bit_Print_Char(&lcd, press);
 80025b6:	79bb      	ldrb	r3, [r7, #6]
 80025b8:	4619      	mov	r1, r3
 80025ba:	4808      	ldr	r0, [pc, #32]	; (80025dc <main+0x78>)
 80025bc:	f7fe fe92 	bl	80012e4 <LCD_4bit_Print_Char>
 80025c0:	e007      	b.n	80025d2 <main+0x6e>
		}
		else if (press == '=')
 80025c2:	79bb      	ldrb	r3, [r7, #6]
 80025c4:	2b3d      	cmp	r3, #61	; 0x3d
 80025c6:	d1d4      	bne.n	8002572 <main+0xe>
		{
			i = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	71fb      	strb	r3, [r7, #7]
			Calc(Operation);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <main+0x74>)
 80025ce:	f7ff fc67 	bl	8001ea0 <Calc>
	{
 80025d2:	e7ce      	b.n	8002572 <main+0xe>
 80025d4:	2000018c 	.word	0x2000018c
 80025d8:	200001cc 	.word	0x200001cc
 80025dc:	20000144 	.word	0x20000144

080025e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025e8:	4a14      	ldr	r2, [pc, #80]	; (800263c <_sbrk+0x5c>)
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <_sbrk+0x60>)
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025f4:	4b13      	ldr	r3, [pc, #76]	; (8002644 <_sbrk+0x64>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d102      	bne.n	8002602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <_sbrk+0x64>)
 80025fe:	4a12      	ldr	r2, [pc, #72]	; (8002648 <_sbrk+0x68>)
 8002600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <_sbrk+0x64>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	429a      	cmp	r2, r3
 800260e:	d207      	bcs.n	8002620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002610:	f000 f846 	bl	80026a0 <__errno>
 8002614:	4602      	mov	r2, r0
 8002616:	230c      	movs	r3, #12
 8002618:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800261a:	f04f 33ff 	mov.w	r3, #4294967295
 800261e:	e009      	b.n	8002634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <_sbrk+0x64>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002626:	4b07      	ldr	r3, [pc, #28]	; (8002644 <_sbrk+0x64>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	4a05      	ldr	r2, [pc, #20]	; (8002644 <_sbrk+0x64>)
 8002630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002632:	68fb      	ldr	r3, [r7, #12]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20002800 	.word	0x20002800
 8002640:	00000400 	.word	0x00000400
 8002644:	20000138 	.word	0x20000138
 8002648:	20000210 	.word	0x20000210

0800264c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800264c:	480d      	ldr	r0, [pc, #52]	; (8002684 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800264e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002650:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002654:	480c      	ldr	r0, [pc, #48]	; (8002688 <LoopForever+0x6>)
  ldr r1, =_edata
 8002656:	490d      	ldr	r1, [pc, #52]	; (800268c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002658:	4a0d      	ldr	r2, [pc, #52]	; (8002690 <LoopForever+0xe>)
  movs r3, #0
 800265a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800265c:	e002      	b.n	8002664 <LoopCopyDataInit>

0800265e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800265e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002662:	3304      	adds	r3, #4

08002664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002668:	d3f9      	bcc.n	800265e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800266a:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <LoopForever+0x12>)
  ldr r4, =_ebss
 800266c:	4c0a      	ldr	r4, [pc, #40]	; (8002698 <LoopForever+0x16>)
  movs r3, #0
 800266e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002670:	e001      	b.n	8002676 <LoopFillZerobss>

08002672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002674:	3204      	adds	r2, #4

08002676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002678:	d3fb      	bcc.n	8002672 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800267a:	f000 f817 	bl	80026ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800267e:	f7ff ff71 	bl	8002564 <main>

08002682 <LoopForever>:

LoopForever:
    b LoopForever
 8002682:	e7fe      	b.n	8002682 <LoopForever>
  ldr   r0, =_estack
 8002684:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8002688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800268c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002690:	08002f9c 	.word	0x08002f9c
  ldr r2, =_sbss
 8002694:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002698:	2000020c 	.word	0x2000020c

0800269c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800269c:	e7fe      	b.n	800269c <ADC1_2_IRQHandler>
	...

080026a0 <__errno>:
 80026a0:	4b01      	ldr	r3, [pc, #4]	; (80026a8 <__errno+0x8>)
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000004 	.word	0x20000004

080026ac <__libc_init_array>:
 80026ac:	b570      	push	{r4, r5, r6, lr}
 80026ae:	2500      	movs	r5, #0
 80026b0:	4e0c      	ldr	r6, [pc, #48]	; (80026e4 <__libc_init_array+0x38>)
 80026b2:	4c0d      	ldr	r4, [pc, #52]	; (80026e8 <__libc_init_array+0x3c>)
 80026b4:	1ba4      	subs	r4, r4, r6
 80026b6:	10a4      	asrs	r4, r4, #2
 80026b8:	42a5      	cmp	r5, r4
 80026ba:	d109      	bne.n	80026d0 <__libc_init_array+0x24>
 80026bc:	f000 fc2c 	bl	8002f18 <_init>
 80026c0:	2500      	movs	r5, #0
 80026c2:	4e0a      	ldr	r6, [pc, #40]	; (80026ec <__libc_init_array+0x40>)
 80026c4:	4c0a      	ldr	r4, [pc, #40]	; (80026f0 <__libc_init_array+0x44>)
 80026c6:	1ba4      	subs	r4, r4, r6
 80026c8:	10a4      	asrs	r4, r4, #2
 80026ca:	42a5      	cmp	r5, r4
 80026cc:	d105      	bne.n	80026da <__libc_init_array+0x2e>
 80026ce:	bd70      	pop	{r4, r5, r6, pc}
 80026d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026d4:	4798      	blx	r3
 80026d6:	3501      	adds	r5, #1
 80026d8:	e7ee      	b.n	80026b8 <__libc_init_array+0xc>
 80026da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026de:	4798      	blx	r3
 80026e0:	3501      	adds	r5, #1
 80026e2:	e7f2      	b.n	80026ca <__libc_init_array+0x1e>
 80026e4:	08002f94 	.word	0x08002f94
 80026e8:	08002f94 	.word	0x08002f94
 80026ec:	08002f94 	.word	0x08002f94
 80026f0:	08002f98 	.word	0x08002f98

080026f4 <siprintf>:
 80026f4:	b40e      	push	{r1, r2, r3}
 80026f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80026fa:	b500      	push	{lr}
 80026fc:	b09c      	sub	sp, #112	; 0x70
 80026fe:	ab1d      	add	r3, sp, #116	; 0x74
 8002700:	9002      	str	r0, [sp, #8]
 8002702:	9006      	str	r0, [sp, #24]
 8002704:	9107      	str	r1, [sp, #28]
 8002706:	9104      	str	r1, [sp, #16]
 8002708:	4808      	ldr	r0, [pc, #32]	; (800272c <siprintf+0x38>)
 800270a:	4909      	ldr	r1, [pc, #36]	; (8002730 <siprintf+0x3c>)
 800270c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002710:	9105      	str	r1, [sp, #20]
 8002712:	6800      	ldr	r0, [r0, #0]
 8002714:	a902      	add	r1, sp, #8
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	f000 f866 	bl	80027e8 <_svfiprintf_r>
 800271c:	2200      	movs	r2, #0
 800271e:	9b02      	ldr	r3, [sp, #8]
 8002720:	701a      	strb	r2, [r3, #0]
 8002722:	b01c      	add	sp, #112	; 0x70
 8002724:	f85d eb04 	ldr.w	lr, [sp], #4
 8002728:	b003      	add	sp, #12
 800272a:	4770      	bx	lr
 800272c:	20000004 	.word	0x20000004
 8002730:	ffff0208 	.word	0xffff0208

08002734 <__ssputs_r>:
 8002734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002738:	688e      	ldr	r6, [r1, #8]
 800273a:	4682      	mov	sl, r0
 800273c:	429e      	cmp	r6, r3
 800273e:	460c      	mov	r4, r1
 8002740:	4690      	mov	r8, r2
 8002742:	4699      	mov	r9, r3
 8002744:	d837      	bhi.n	80027b6 <__ssputs_r+0x82>
 8002746:	898a      	ldrh	r2, [r1, #12]
 8002748:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800274c:	d031      	beq.n	80027b2 <__ssputs_r+0x7e>
 800274e:	2302      	movs	r3, #2
 8002750:	6825      	ldr	r5, [r4, #0]
 8002752:	6909      	ldr	r1, [r1, #16]
 8002754:	1a6f      	subs	r7, r5, r1
 8002756:	6965      	ldr	r5, [r4, #20]
 8002758:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800275c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002760:	f109 0301 	add.w	r3, r9, #1
 8002764:	443b      	add	r3, r7
 8002766:	429d      	cmp	r5, r3
 8002768:	bf38      	it	cc
 800276a:	461d      	movcc	r5, r3
 800276c:	0553      	lsls	r3, r2, #21
 800276e:	d530      	bpl.n	80027d2 <__ssputs_r+0x9e>
 8002770:	4629      	mov	r1, r5
 8002772:	f000 fb37 	bl	8002de4 <_malloc_r>
 8002776:	4606      	mov	r6, r0
 8002778:	b950      	cbnz	r0, 8002790 <__ssputs_r+0x5c>
 800277a:	230c      	movs	r3, #12
 800277c:	f04f 30ff 	mov.w	r0, #4294967295
 8002780:	f8ca 3000 	str.w	r3, [sl]
 8002784:	89a3      	ldrh	r3, [r4, #12]
 8002786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800278a:	81a3      	strh	r3, [r4, #12]
 800278c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002790:	463a      	mov	r2, r7
 8002792:	6921      	ldr	r1, [r4, #16]
 8002794:	f000 fab6 	bl	8002d04 <memcpy>
 8002798:	89a3      	ldrh	r3, [r4, #12]
 800279a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800279e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a2:	81a3      	strh	r3, [r4, #12]
 80027a4:	6126      	str	r6, [r4, #16]
 80027a6:	443e      	add	r6, r7
 80027a8:	6026      	str	r6, [r4, #0]
 80027aa:	464e      	mov	r6, r9
 80027ac:	6165      	str	r5, [r4, #20]
 80027ae:	1bed      	subs	r5, r5, r7
 80027b0:	60a5      	str	r5, [r4, #8]
 80027b2:	454e      	cmp	r6, r9
 80027b4:	d900      	bls.n	80027b8 <__ssputs_r+0x84>
 80027b6:	464e      	mov	r6, r9
 80027b8:	4632      	mov	r2, r6
 80027ba:	4641      	mov	r1, r8
 80027bc:	6820      	ldr	r0, [r4, #0]
 80027be:	f000 faac 	bl	8002d1a <memmove>
 80027c2:	68a3      	ldr	r3, [r4, #8]
 80027c4:	2000      	movs	r0, #0
 80027c6:	1b9b      	subs	r3, r3, r6
 80027c8:	60a3      	str	r3, [r4, #8]
 80027ca:	6823      	ldr	r3, [r4, #0]
 80027cc:	441e      	add	r6, r3
 80027ce:	6026      	str	r6, [r4, #0]
 80027d0:	e7dc      	b.n	800278c <__ssputs_r+0x58>
 80027d2:	462a      	mov	r2, r5
 80027d4:	f000 fb60 	bl	8002e98 <_realloc_r>
 80027d8:	4606      	mov	r6, r0
 80027da:	2800      	cmp	r0, #0
 80027dc:	d1e2      	bne.n	80027a4 <__ssputs_r+0x70>
 80027de:	6921      	ldr	r1, [r4, #16]
 80027e0:	4650      	mov	r0, sl
 80027e2:	f000 fab3 	bl	8002d4c <_free_r>
 80027e6:	e7c8      	b.n	800277a <__ssputs_r+0x46>

080027e8 <_svfiprintf_r>:
 80027e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027ec:	461d      	mov	r5, r3
 80027ee:	898b      	ldrh	r3, [r1, #12]
 80027f0:	b09d      	sub	sp, #116	; 0x74
 80027f2:	061f      	lsls	r7, r3, #24
 80027f4:	4680      	mov	r8, r0
 80027f6:	460c      	mov	r4, r1
 80027f8:	4616      	mov	r6, r2
 80027fa:	d50f      	bpl.n	800281c <_svfiprintf_r+0x34>
 80027fc:	690b      	ldr	r3, [r1, #16]
 80027fe:	b96b      	cbnz	r3, 800281c <_svfiprintf_r+0x34>
 8002800:	2140      	movs	r1, #64	; 0x40
 8002802:	f000 faef 	bl	8002de4 <_malloc_r>
 8002806:	6020      	str	r0, [r4, #0]
 8002808:	6120      	str	r0, [r4, #16]
 800280a:	b928      	cbnz	r0, 8002818 <_svfiprintf_r+0x30>
 800280c:	230c      	movs	r3, #12
 800280e:	f8c8 3000 	str.w	r3, [r8]
 8002812:	f04f 30ff 	mov.w	r0, #4294967295
 8002816:	e0c8      	b.n	80029aa <_svfiprintf_r+0x1c2>
 8002818:	2340      	movs	r3, #64	; 0x40
 800281a:	6163      	str	r3, [r4, #20]
 800281c:	2300      	movs	r3, #0
 800281e:	9309      	str	r3, [sp, #36]	; 0x24
 8002820:	2320      	movs	r3, #32
 8002822:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002826:	2330      	movs	r3, #48	; 0x30
 8002828:	f04f 0b01 	mov.w	fp, #1
 800282c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002830:	9503      	str	r5, [sp, #12]
 8002832:	4637      	mov	r7, r6
 8002834:	463d      	mov	r5, r7
 8002836:	f815 3b01 	ldrb.w	r3, [r5], #1
 800283a:	b10b      	cbz	r3, 8002840 <_svfiprintf_r+0x58>
 800283c:	2b25      	cmp	r3, #37	; 0x25
 800283e:	d13e      	bne.n	80028be <_svfiprintf_r+0xd6>
 8002840:	ebb7 0a06 	subs.w	sl, r7, r6
 8002844:	d00b      	beq.n	800285e <_svfiprintf_r+0x76>
 8002846:	4653      	mov	r3, sl
 8002848:	4632      	mov	r2, r6
 800284a:	4621      	mov	r1, r4
 800284c:	4640      	mov	r0, r8
 800284e:	f7ff ff71 	bl	8002734 <__ssputs_r>
 8002852:	3001      	adds	r0, #1
 8002854:	f000 80a4 	beq.w	80029a0 <_svfiprintf_r+0x1b8>
 8002858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800285a:	4453      	add	r3, sl
 800285c:	9309      	str	r3, [sp, #36]	; 0x24
 800285e:	783b      	ldrb	r3, [r7, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 809d 	beq.w	80029a0 <_svfiprintf_r+0x1b8>
 8002866:	2300      	movs	r3, #0
 8002868:	f04f 32ff 	mov.w	r2, #4294967295
 800286c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002870:	9304      	str	r3, [sp, #16]
 8002872:	9307      	str	r3, [sp, #28]
 8002874:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002878:	931a      	str	r3, [sp, #104]	; 0x68
 800287a:	462f      	mov	r7, r5
 800287c:	2205      	movs	r2, #5
 800287e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002882:	4850      	ldr	r0, [pc, #320]	; (80029c4 <_svfiprintf_r+0x1dc>)
 8002884:	f000 fa30 	bl	8002ce8 <memchr>
 8002888:	9b04      	ldr	r3, [sp, #16]
 800288a:	b9d0      	cbnz	r0, 80028c2 <_svfiprintf_r+0xda>
 800288c:	06d9      	lsls	r1, r3, #27
 800288e:	bf44      	itt	mi
 8002890:	2220      	movmi	r2, #32
 8002892:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002896:	071a      	lsls	r2, r3, #28
 8002898:	bf44      	itt	mi
 800289a:	222b      	movmi	r2, #43	; 0x2b
 800289c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80028a0:	782a      	ldrb	r2, [r5, #0]
 80028a2:	2a2a      	cmp	r2, #42	; 0x2a
 80028a4:	d015      	beq.n	80028d2 <_svfiprintf_r+0xea>
 80028a6:	462f      	mov	r7, r5
 80028a8:	2000      	movs	r0, #0
 80028aa:	250a      	movs	r5, #10
 80028ac:	9a07      	ldr	r2, [sp, #28]
 80028ae:	4639      	mov	r1, r7
 80028b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028b4:	3b30      	subs	r3, #48	; 0x30
 80028b6:	2b09      	cmp	r3, #9
 80028b8:	d94d      	bls.n	8002956 <_svfiprintf_r+0x16e>
 80028ba:	b1b8      	cbz	r0, 80028ec <_svfiprintf_r+0x104>
 80028bc:	e00f      	b.n	80028de <_svfiprintf_r+0xf6>
 80028be:	462f      	mov	r7, r5
 80028c0:	e7b8      	b.n	8002834 <_svfiprintf_r+0x4c>
 80028c2:	4a40      	ldr	r2, [pc, #256]	; (80029c4 <_svfiprintf_r+0x1dc>)
 80028c4:	463d      	mov	r5, r7
 80028c6:	1a80      	subs	r0, r0, r2
 80028c8:	fa0b f000 	lsl.w	r0, fp, r0
 80028cc:	4318      	orrs	r0, r3
 80028ce:	9004      	str	r0, [sp, #16]
 80028d0:	e7d3      	b.n	800287a <_svfiprintf_r+0x92>
 80028d2:	9a03      	ldr	r2, [sp, #12]
 80028d4:	1d11      	adds	r1, r2, #4
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	9103      	str	r1, [sp, #12]
 80028da:	2a00      	cmp	r2, #0
 80028dc:	db01      	blt.n	80028e2 <_svfiprintf_r+0xfa>
 80028de:	9207      	str	r2, [sp, #28]
 80028e0:	e004      	b.n	80028ec <_svfiprintf_r+0x104>
 80028e2:	4252      	negs	r2, r2
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	9207      	str	r2, [sp, #28]
 80028ea:	9304      	str	r3, [sp, #16]
 80028ec:	783b      	ldrb	r3, [r7, #0]
 80028ee:	2b2e      	cmp	r3, #46	; 0x2e
 80028f0:	d10c      	bne.n	800290c <_svfiprintf_r+0x124>
 80028f2:	787b      	ldrb	r3, [r7, #1]
 80028f4:	2b2a      	cmp	r3, #42	; 0x2a
 80028f6:	d133      	bne.n	8002960 <_svfiprintf_r+0x178>
 80028f8:	9b03      	ldr	r3, [sp, #12]
 80028fa:	3702      	adds	r7, #2
 80028fc:	1d1a      	adds	r2, r3, #4
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	9203      	str	r2, [sp, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	bfb8      	it	lt
 8002906:	f04f 33ff 	movlt.w	r3, #4294967295
 800290a:	9305      	str	r3, [sp, #20]
 800290c:	4d2e      	ldr	r5, [pc, #184]	; (80029c8 <_svfiprintf_r+0x1e0>)
 800290e:	2203      	movs	r2, #3
 8002910:	7839      	ldrb	r1, [r7, #0]
 8002912:	4628      	mov	r0, r5
 8002914:	f000 f9e8 	bl	8002ce8 <memchr>
 8002918:	b138      	cbz	r0, 800292a <_svfiprintf_r+0x142>
 800291a:	2340      	movs	r3, #64	; 0x40
 800291c:	1b40      	subs	r0, r0, r5
 800291e:	fa03 f000 	lsl.w	r0, r3, r0
 8002922:	9b04      	ldr	r3, [sp, #16]
 8002924:	3701      	adds	r7, #1
 8002926:	4303      	orrs	r3, r0
 8002928:	9304      	str	r3, [sp, #16]
 800292a:	7839      	ldrb	r1, [r7, #0]
 800292c:	2206      	movs	r2, #6
 800292e:	4827      	ldr	r0, [pc, #156]	; (80029cc <_svfiprintf_r+0x1e4>)
 8002930:	1c7e      	adds	r6, r7, #1
 8002932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002936:	f000 f9d7 	bl	8002ce8 <memchr>
 800293a:	2800      	cmp	r0, #0
 800293c:	d038      	beq.n	80029b0 <_svfiprintf_r+0x1c8>
 800293e:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <_svfiprintf_r+0x1e8>)
 8002940:	bb13      	cbnz	r3, 8002988 <_svfiprintf_r+0x1a0>
 8002942:	9b03      	ldr	r3, [sp, #12]
 8002944:	3307      	adds	r3, #7
 8002946:	f023 0307 	bic.w	r3, r3, #7
 800294a:	3308      	adds	r3, #8
 800294c:	9303      	str	r3, [sp, #12]
 800294e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002950:	444b      	add	r3, r9
 8002952:	9309      	str	r3, [sp, #36]	; 0x24
 8002954:	e76d      	b.n	8002832 <_svfiprintf_r+0x4a>
 8002956:	fb05 3202 	mla	r2, r5, r2, r3
 800295a:	2001      	movs	r0, #1
 800295c:	460f      	mov	r7, r1
 800295e:	e7a6      	b.n	80028ae <_svfiprintf_r+0xc6>
 8002960:	2300      	movs	r3, #0
 8002962:	250a      	movs	r5, #10
 8002964:	4619      	mov	r1, r3
 8002966:	3701      	adds	r7, #1
 8002968:	9305      	str	r3, [sp, #20]
 800296a:	4638      	mov	r0, r7
 800296c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002970:	3a30      	subs	r2, #48	; 0x30
 8002972:	2a09      	cmp	r2, #9
 8002974:	d903      	bls.n	800297e <_svfiprintf_r+0x196>
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0c8      	beq.n	800290c <_svfiprintf_r+0x124>
 800297a:	9105      	str	r1, [sp, #20]
 800297c:	e7c6      	b.n	800290c <_svfiprintf_r+0x124>
 800297e:	fb05 2101 	mla	r1, r5, r1, r2
 8002982:	2301      	movs	r3, #1
 8002984:	4607      	mov	r7, r0
 8002986:	e7f0      	b.n	800296a <_svfiprintf_r+0x182>
 8002988:	ab03      	add	r3, sp, #12
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	4622      	mov	r2, r4
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <_svfiprintf_r+0x1ec>)
 8002990:	a904      	add	r1, sp, #16
 8002992:	4640      	mov	r0, r8
 8002994:	f3af 8000 	nop.w
 8002998:	f1b0 3fff 	cmp.w	r0, #4294967295
 800299c:	4681      	mov	r9, r0
 800299e:	d1d6      	bne.n	800294e <_svfiprintf_r+0x166>
 80029a0:	89a3      	ldrh	r3, [r4, #12]
 80029a2:	065b      	lsls	r3, r3, #25
 80029a4:	f53f af35 	bmi.w	8002812 <_svfiprintf_r+0x2a>
 80029a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029aa:	b01d      	add	sp, #116	; 0x74
 80029ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029b0:	ab03      	add	r3, sp, #12
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	4622      	mov	r2, r4
 80029b6:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <_svfiprintf_r+0x1ec>)
 80029b8:	a904      	add	r1, sp, #16
 80029ba:	4640      	mov	r0, r8
 80029bc:	f000 f882 	bl	8002ac4 <_printf_i>
 80029c0:	e7ea      	b.n	8002998 <_svfiprintf_r+0x1b0>
 80029c2:	bf00      	nop
 80029c4:	08002f5f 	.word	0x08002f5f
 80029c8:	08002f65 	.word	0x08002f65
 80029cc:	08002f69 	.word	0x08002f69
 80029d0:	00000000 	.word	0x00000000
 80029d4:	08002735 	.word	0x08002735

080029d8 <_printf_common>:
 80029d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029dc:	4691      	mov	r9, r2
 80029de:	461f      	mov	r7, r3
 80029e0:	688a      	ldr	r2, [r1, #8]
 80029e2:	690b      	ldr	r3, [r1, #16]
 80029e4:	4606      	mov	r6, r0
 80029e6:	4293      	cmp	r3, r2
 80029e8:	bfb8      	it	lt
 80029ea:	4613      	movlt	r3, r2
 80029ec:	f8c9 3000 	str.w	r3, [r9]
 80029f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029f4:	460c      	mov	r4, r1
 80029f6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029fa:	b112      	cbz	r2, 8002a02 <_printf_common+0x2a>
 80029fc:	3301      	adds	r3, #1
 80029fe:	f8c9 3000 	str.w	r3, [r9]
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	0699      	lsls	r1, r3, #26
 8002a06:	bf42      	ittt	mi
 8002a08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002a0c:	3302      	addmi	r3, #2
 8002a0e:	f8c9 3000 	strmi.w	r3, [r9]
 8002a12:	6825      	ldr	r5, [r4, #0]
 8002a14:	f015 0506 	ands.w	r5, r5, #6
 8002a18:	d107      	bne.n	8002a2a <_printf_common+0x52>
 8002a1a:	f104 0a19 	add.w	sl, r4, #25
 8002a1e:	68e3      	ldr	r3, [r4, #12]
 8002a20:	f8d9 2000 	ldr.w	r2, [r9]
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	42ab      	cmp	r3, r5
 8002a28:	dc29      	bgt.n	8002a7e <_printf_common+0xa6>
 8002a2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002a2e:	6822      	ldr	r2, [r4, #0]
 8002a30:	3300      	adds	r3, #0
 8002a32:	bf18      	it	ne
 8002a34:	2301      	movne	r3, #1
 8002a36:	0692      	lsls	r2, r2, #26
 8002a38:	d42e      	bmi.n	8002a98 <_printf_common+0xc0>
 8002a3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a3e:	4639      	mov	r1, r7
 8002a40:	4630      	mov	r0, r6
 8002a42:	47c0      	blx	r8
 8002a44:	3001      	adds	r0, #1
 8002a46:	d021      	beq.n	8002a8c <_printf_common+0xb4>
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	68e5      	ldr	r5, [r4, #12]
 8002a4c:	f003 0306 	and.w	r3, r3, #6
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	bf18      	it	ne
 8002a54:	2500      	movne	r5, #0
 8002a56:	f8d9 2000 	ldr.w	r2, [r9]
 8002a5a:	f04f 0900 	mov.w	r9, #0
 8002a5e:	bf08      	it	eq
 8002a60:	1aad      	subeq	r5, r5, r2
 8002a62:	68a3      	ldr	r3, [r4, #8]
 8002a64:	6922      	ldr	r2, [r4, #16]
 8002a66:	bf08      	it	eq
 8002a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	bfc4      	itt	gt
 8002a70:	1a9b      	subgt	r3, r3, r2
 8002a72:	18ed      	addgt	r5, r5, r3
 8002a74:	341a      	adds	r4, #26
 8002a76:	454d      	cmp	r5, r9
 8002a78:	d11a      	bne.n	8002ab0 <_printf_common+0xd8>
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	e008      	b.n	8002a90 <_printf_common+0xb8>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	4652      	mov	r2, sl
 8002a82:	4639      	mov	r1, r7
 8002a84:	4630      	mov	r0, r6
 8002a86:	47c0      	blx	r8
 8002a88:	3001      	adds	r0, #1
 8002a8a:	d103      	bne.n	8002a94 <_printf_common+0xbc>
 8002a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a94:	3501      	adds	r5, #1
 8002a96:	e7c2      	b.n	8002a1e <_printf_common+0x46>
 8002a98:	2030      	movs	r0, #48	; 0x30
 8002a9a:	18e1      	adds	r1, r4, r3
 8002a9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002aa6:	4422      	add	r2, r4
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002aae:	e7c4      	b.n	8002a3a <_printf_common+0x62>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	4622      	mov	r2, r4
 8002ab4:	4639      	mov	r1, r7
 8002ab6:	4630      	mov	r0, r6
 8002ab8:	47c0      	blx	r8
 8002aba:	3001      	adds	r0, #1
 8002abc:	d0e6      	beq.n	8002a8c <_printf_common+0xb4>
 8002abe:	f109 0901 	add.w	r9, r9, #1
 8002ac2:	e7d8      	b.n	8002a76 <_printf_common+0x9e>

08002ac4 <_printf_i>:
 8002ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ac8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002acc:	460c      	mov	r4, r1
 8002ace:	7e09      	ldrb	r1, [r1, #24]
 8002ad0:	b085      	sub	sp, #20
 8002ad2:	296e      	cmp	r1, #110	; 0x6e
 8002ad4:	4617      	mov	r7, r2
 8002ad6:	4606      	mov	r6, r0
 8002ad8:	4698      	mov	r8, r3
 8002ada:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002adc:	f000 80b3 	beq.w	8002c46 <_printf_i+0x182>
 8002ae0:	d822      	bhi.n	8002b28 <_printf_i+0x64>
 8002ae2:	2963      	cmp	r1, #99	; 0x63
 8002ae4:	d036      	beq.n	8002b54 <_printf_i+0x90>
 8002ae6:	d80a      	bhi.n	8002afe <_printf_i+0x3a>
 8002ae8:	2900      	cmp	r1, #0
 8002aea:	f000 80b9 	beq.w	8002c60 <_printf_i+0x19c>
 8002aee:	2958      	cmp	r1, #88	; 0x58
 8002af0:	f000 8083 	beq.w	8002bfa <_printf_i+0x136>
 8002af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002af8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002afc:	e032      	b.n	8002b64 <_printf_i+0xa0>
 8002afe:	2964      	cmp	r1, #100	; 0x64
 8002b00:	d001      	beq.n	8002b06 <_printf_i+0x42>
 8002b02:	2969      	cmp	r1, #105	; 0x69
 8002b04:	d1f6      	bne.n	8002af4 <_printf_i+0x30>
 8002b06:	6820      	ldr	r0, [r4, #0]
 8002b08:	6813      	ldr	r3, [r2, #0]
 8002b0a:	0605      	lsls	r5, r0, #24
 8002b0c:	f103 0104 	add.w	r1, r3, #4
 8002b10:	d52a      	bpl.n	8002b68 <_printf_i+0xa4>
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6011      	str	r1, [r2, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	da03      	bge.n	8002b22 <_printf_i+0x5e>
 8002b1a:	222d      	movs	r2, #45	; 0x2d
 8002b1c:	425b      	negs	r3, r3
 8002b1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002b22:	486f      	ldr	r0, [pc, #444]	; (8002ce0 <_printf_i+0x21c>)
 8002b24:	220a      	movs	r2, #10
 8002b26:	e039      	b.n	8002b9c <_printf_i+0xd8>
 8002b28:	2973      	cmp	r1, #115	; 0x73
 8002b2a:	f000 809d 	beq.w	8002c68 <_printf_i+0x1a4>
 8002b2e:	d808      	bhi.n	8002b42 <_printf_i+0x7e>
 8002b30:	296f      	cmp	r1, #111	; 0x6f
 8002b32:	d020      	beq.n	8002b76 <_printf_i+0xb2>
 8002b34:	2970      	cmp	r1, #112	; 0x70
 8002b36:	d1dd      	bne.n	8002af4 <_printf_i+0x30>
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	f043 0320 	orr.w	r3, r3, #32
 8002b3e:	6023      	str	r3, [r4, #0]
 8002b40:	e003      	b.n	8002b4a <_printf_i+0x86>
 8002b42:	2975      	cmp	r1, #117	; 0x75
 8002b44:	d017      	beq.n	8002b76 <_printf_i+0xb2>
 8002b46:	2978      	cmp	r1, #120	; 0x78
 8002b48:	d1d4      	bne.n	8002af4 <_printf_i+0x30>
 8002b4a:	2378      	movs	r3, #120	; 0x78
 8002b4c:	4865      	ldr	r0, [pc, #404]	; (8002ce4 <_printf_i+0x220>)
 8002b4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b52:	e055      	b.n	8002c00 <_printf_i+0x13c>
 8002b54:	6813      	ldr	r3, [r2, #0]
 8002b56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b5a:	1d19      	adds	r1, r3, #4
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6011      	str	r1, [r2, #0]
 8002b60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b64:	2301      	movs	r3, #1
 8002b66:	e08c      	b.n	8002c82 <_printf_i+0x1be>
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b6e:	6011      	str	r1, [r2, #0]
 8002b70:	bf18      	it	ne
 8002b72:	b21b      	sxthne	r3, r3
 8002b74:	e7cf      	b.n	8002b16 <_printf_i+0x52>
 8002b76:	6813      	ldr	r3, [r2, #0]
 8002b78:	6825      	ldr	r5, [r4, #0]
 8002b7a:	1d18      	adds	r0, r3, #4
 8002b7c:	6010      	str	r0, [r2, #0]
 8002b7e:	0628      	lsls	r0, r5, #24
 8002b80:	d501      	bpl.n	8002b86 <_printf_i+0xc2>
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	e002      	b.n	8002b8c <_printf_i+0xc8>
 8002b86:	0668      	lsls	r0, r5, #25
 8002b88:	d5fb      	bpl.n	8002b82 <_printf_i+0xbe>
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	296f      	cmp	r1, #111	; 0x6f
 8002b8e:	bf14      	ite	ne
 8002b90:	220a      	movne	r2, #10
 8002b92:	2208      	moveq	r2, #8
 8002b94:	4852      	ldr	r0, [pc, #328]	; (8002ce0 <_printf_i+0x21c>)
 8002b96:	2100      	movs	r1, #0
 8002b98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b9c:	6865      	ldr	r5, [r4, #4]
 8002b9e:	2d00      	cmp	r5, #0
 8002ba0:	60a5      	str	r5, [r4, #8]
 8002ba2:	f2c0 8095 	blt.w	8002cd0 <_printf_i+0x20c>
 8002ba6:	6821      	ldr	r1, [r4, #0]
 8002ba8:	f021 0104 	bic.w	r1, r1, #4
 8002bac:	6021      	str	r1, [r4, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d13d      	bne.n	8002c2e <_printf_i+0x16a>
 8002bb2:	2d00      	cmp	r5, #0
 8002bb4:	f040 808e 	bne.w	8002cd4 <_printf_i+0x210>
 8002bb8:	4665      	mov	r5, ip
 8002bba:	2a08      	cmp	r2, #8
 8002bbc:	d10b      	bne.n	8002bd6 <_printf_i+0x112>
 8002bbe:	6823      	ldr	r3, [r4, #0]
 8002bc0:	07db      	lsls	r3, r3, #31
 8002bc2:	d508      	bpl.n	8002bd6 <_printf_i+0x112>
 8002bc4:	6923      	ldr	r3, [r4, #16]
 8002bc6:	6862      	ldr	r2, [r4, #4]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	bfde      	ittt	le
 8002bcc:	2330      	movle	r3, #48	; 0x30
 8002bce:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002bd2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002bd6:	ebac 0305 	sub.w	r3, ip, r5
 8002bda:	6123      	str	r3, [r4, #16]
 8002bdc:	f8cd 8000 	str.w	r8, [sp]
 8002be0:	463b      	mov	r3, r7
 8002be2:	aa03      	add	r2, sp, #12
 8002be4:	4621      	mov	r1, r4
 8002be6:	4630      	mov	r0, r6
 8002be8:	f7ff fef6 	bl	80029d8 <_printf_common>
 8002bec:	3001      	adds	r0, #1
 8002bee:	d14d      	bne.n	8002c8c <_printf_i+0x1c8>
 8002bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf4:	b005      	add	sp, #20
 8002bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bfa:	4839      	ldr	r0, [pc, #228]	; (8002ce0 <_printf_i+0x21c>)
 8002bfc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002c00:	6813      	ldr	r3, [r2, #0]
 8002c02:	6821      	ldr	r1, [r4, #0]
 8002c04:	1d1d      	adds	r5, r3, #4
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6015      	str	r5, [r2, #0]
 8002c0a:	060a      	lsls	r2, r1, #24
 8002c0c:	d50b      	bpl.n	8002c26 <_printf_i+0x162>
 8002c0e:	07ca      	lsls	r2, r1, #31
 8002c10:	bf44      	itt	mi
 8002c12:	f041 0120 	orrmi.w	r1, r1, #32
 8002c16:	6021      	strmi	r1, [r4, #0]
 8002c18:	b91b      	cbnz	r3, 8002c22 <_printf_i+0x15e>
 8002c1a:	6822      	ldr	r2, [r4, #0]
 8002c1c:	f022 0220 	bic.w	r2, r2, #32
 8002c20:	6022      	str	r2, [r4, #0]
 8002c22:	2210      	movs	r2, #16
 8002c24:	e7b7      	b.n	8002b96 <_printf_i+0xd2>
 8002c26:	064d      	lsls	r5, r1, #25
 8002c28:	bf48      	it	mi
 8002c2a:	b29b      	uxthmi	r3, r3
 8002c2c:	e7ef      	b.n	8002c0e <_printf_i+0x14a>
 8002c2e:	4665      	mov	r5, ip
 8002c30:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c34:	fb02 3311 	mls	r3, r2, r1, r3
 8002c38:	5cc3      	ldrb	r3, [r0, r3]
 8002c3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002c3e:	460b      	mov	r3, r1
 8002c40:	2900      	cmp	r1, #0
 8002c42:	d1f5      	bne.n	8002c30 <_printf_i+0x16c>
 8002c44:	e7b9      	b.n	8002bba <_printf_i+0xf6>
 8002c46:	6813      	ldr	r3, [r2, #0]
 8002c48:	6825      	ldr	r5, [r4, #0]
 8002c4a:	1d18      	adds	r0, r3, #4
 8002c4c:	6961      	ldr	r1, [r4, #20]
 8002c4e:	6010      	str	r0, [r2, #0]
 8002c50:	0628      	lsls	r0, r5, #24
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	d501      	bpl.n	8002c5a <_printf_i+0x196>
 8002c56:	6019      	str	r1, [r3, #0]
 8002c58:	e002      	b.n	8002c60 <_printf_i+0x19c>
 8002c5a:	066a      	lsls	r2, r5, #25
 8002c5c:	d5fb      	bpl.n	8002c56 <_printf_i+0x192>
 8002c5e:	8019      	strh	r1, [r3, #0]
 8002c60:	2300      	movs	r3, #0
 8002c62:	4665      	mov	r5, ip
 8002c64:	6123      	str	r3, [r4, #16]
 8002c66:	e7b9      	b.n	8002bdc <_printf_i+0x118>
 8002c68:	6813      	ldr	r3, [r2, #0]
 8002c6a:	1d19      	adds	r1, r3, #4
 8002c6c:	6011      	str	r1, [r2, #0]
 8002c6e:	681d      	ldr	r5, [r3, #0]
 8002c70:	6862      	ldr	r2, [r4, #4]
 8002c72:	2100      	movs	r1, #0
 8002c74:	4628      	mov	r0, r5
 8002c76:	f000 f837 	bl	8002ce8 <memchr>
 8002c7a:	b108      	cbz	r0, 8002c80 <_printf_i+0x1bc>
 8002c7c:	1b40      	subs	r0, r0, r5
 8002c7e:	6060      	str	r0, [r4, #4]
 8002c80:	6863      	ldr	r3, [r4, #4]
 8002c82:	6123      	str	r3, [r4, #16]
 8002c84:	2300      	movs	r3, #0
 8002c86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c8a:	e7a7      	b.n	8002bdc <_printf_i+0x118>
 8002c8c:	6923      	ldr	r3, [r4, #16]
 8002c8e:	462a      	mov	r2, r5
 8002c90:	4639      	mov	r1, r7
 8002c92:	4630      	mov	r0, r6
 8002c94:	47c0      	blx	r8
 8002c96:	3001      	adds	r0, #1
 8002c98:	d0aa      	beq.n	8002bf0 <_printf_i+0x12c>
 8002c9a:	6823      	ldr	r3, [r4, #0]
 8002c9c:	079b      	lsls	r3, r3, #30
 8002c9e:	d413      	bmi.n	8002cc8 <_printf_i+0x204>
 8002ca0:	68e0      	ldr	r0, [r4, #12]
 8002ca2:	9b03      	ldr	r3, [sp, #12]
 8002ca4:	4298      	cmp	r0, r3
 8002ca6:	bfb8      	it	lt
 8002ca8:	4618      	movlt	r0, r3
 8002caa:	e7a3      	b.n	8002bf4 <_printf_i+0x130>
 8002cac:	2301      	movs	r3, #1
 8002cae:	464a      	mov	r2, r9
 8002cb0:	4639      	mov	r1, r7
 8002cb2:	4630      	mov	r0, r6
 8002cb4:	47c0      	blx	r8
 8002cb6:	3001      	adds	r0, #1
 8002cb8:	d09a      	beq.n	8002bf0 <_printf_i+0x12c>
 8002cba:	3501      	adds	r5, #1
 8002cbc:	68e3      	ldr	r3, [r4, #12]
 8002cbe:	9a03      	ldr	r2, [sp, #12]
 8002cc0:	1a9b      	subs	r3, r3, r2
 8002cc2:	42ab      	cmp	r3, r5
 8002cc4:	dcf2      	bgt.n	8002cac <_printf_i+0x1e8>
 8002cc6:	e7eb      	b.n	8002ca0 <_printf_i+0x1dc>
 8002cc8:	2500      	movs	r5, #0
 8002cca:	f104 0919 	add.w	r9, r4, #25
 8002cce:	e7f5      	b.n	8002cbc <_printf_i+0x1f8>
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1ac      	bne.n	8002c2e <_printf_i+0x16a>
 8002cd4:	7803      	ldrb	r3, [r0, #0]
 8002cd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cde:	e76c      	b.n	8002bba <_printf_i+0xf6>
 8002ce0:	08002f70 	.word	0x08002f70
 8002ce4:	08002f81 	.word	0x08002f81

08002ce8 <memchr>:
 8002ce8:	b510      	push	{r4, lr}
 8002cea:	b2c9      	uxtb	r1, r1
 8002cec:	4402      	add	r2, r0
 8002cee:	4290      	cmp	r0, r2
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	d101      	bne.n	8002cf8 <memchr+0x10>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e003      	b.n	8002d00 <memchr+0x18>
 8002cf8:	781c      	ldrb	r4, [r3, #0]
 8002cfa:	3001      	adds	r0, #1
 8002cfc:	428c      	cmp	r4, r1
 8002cfe:	d1f6      	bne.n	8002cee <memchr+0x6>
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd10      	pop	{r4, pc}

08002d04 <memcpy>:
 8002d04:	b510      	push	{r4, lr}
 8002d06:	1e43      	subs	r3, r0, #1
 8002d08:	440a      	add	r2, r1
 8002d0a:	4291      	cmp	r1, r2
 8002d0c:	d100      	bne.n	8002d10 <memcpy+0xc>
 8002d0e:	bd10      	pop	{r4, pc}
 8002d10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d18:	e7f7      	b.n	8002d0a <memcpy+0x6>

08002d1a <memmove>:
 8002d1a:	4288      	cmp	r0, r1
 8002d1c:	b510      	push	{r4, lr}
 8002d1e:	eb01 0302 	add.w	r3, r1, r2
 8002d22:	d807      	bhi.n	8002d34 <memmove+0x1a>
 8002d24:	1e42      	subs	r2, r0, #1
 8002d26:	4299      	cmp	r1, r3
 8002d28:	d00a      	beq.n	8002d40 <memmove+0x26>
 8002d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d2e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002d32:	e7f8      	b.n	8002d26 <memmove+0xc>
 8002d34:	4283      	cmp	r3, r0
 8002d36:	d9f5      	bls.n	8002d24 <memmove+0xa>
 8002d38:	1881      	adds	r1, r0, r2
 8002d3a:	1ad2      	subs	r2, r2, r3
 8002d3c:	42d3      	cmn	r3, r2
 8002d3e:	d100      	bne.n	8002d42 <memmove+0x28>
 8002d40:	bd10      	pop	{r4, pc}
 8002d42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d46:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002d4a:	e7f7      	b.n	8002d3c <memmove+0x22>

08002d4c <_free_r>:
 8002d4c:	b538      	push	{r3, r4, r5, lr}
 8002d4e:	4605      	mov	r5, r0
 8002d50:	2900      	cmp	r1, #0
 8002d52:	d043      	beq.n	8002ddc <_free_r+0x90>
 8002d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d58:	1f0c      	subs	r4, r1, #4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	bfb8      	it	lt
 8002d5e:	18e4      	addlt	r4, r4, r3
 8002d60:	f000 f8d0 	bl	8002f04 <__malloc_lock>
 8002d64:	4a1e      	ldr	r2, [pc, #120]	; (8002de0 <_free_r+0x94>)
 8002d66:	6813      	ldr	r3, [r2, #0]
 8002d68:	4610      	mov	r0, r2
 8002d6a:	b933      	cbnz	r3, 8002d7a <_free_r+0x2e>
 8002d6c:	6063      	str	r3, [r4, #4]
 8002d6e:	6014      	str	r4, [r2, #0]
 8002d70:	4628      	mov	r0, r5
 8002d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d76:	f000 b8c6 	b.w	8002f06 <__malloc_unlock>
 8002d7a:	42a3      	cmp	r3, r4
 8002d7c:	d90b      	bls.n	8002d96 <_free_r+0x4a>
 8002d7e:	6821      	ldr	r1, [r4, #0]
 8002d80:	1862      	adds	r2, r4, r1
 8002d82:	4293      	cmp	r3, r2
 8002d84:	bf01      	itttt	eq
 8002d86:	681a      	ldreq	r2, [r3, #0]
 8002d88:	685b      	ldreq	r3, [r3, #4]
 8002d8a:	1852      	addeq	r2, r2, r1
 8002d8c:	6022      	streq	r2, [r4, #0]
 8002d8e:	6063      	str	r3, [r4, #4]
 8002d90:	6004      	str	r4, [r0, #0]
 8002d92:	e7ed      	b.n	8002d70 <_free_r+0x24>
 8002d94:	4613      	mov	r3, r2
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	b10a      	cbz	r2, 8002d9e <_free_r+0x52>
 8002d9a:	42a2      	cmp	r2, r4
 8002d9c:	d9fa      	bls.n	8002d94 <_free_r+0x48>
 8002d9e:	6819      	ldr	r1, [r3, #0]
 8002da0:	1858      	adds	r0, r3, r1
 8002da2:	42a0      	cmp	r0, r4
 8002da4:	d10b      	bne.n	8002dbe <_free_r+0x72>
 8002da6:	6820      	ldr	r0, [r4, #0]
 8002da8:	4401      	add	r1, r0
 8002daa:	1858      	adds	r0, r3, r1
 8002dac:	4282      	cmp	r2, r0
 8002dae:	6019      	str	r1, [r3, #0]
 8002db0:	d1de      	bne.n	8002d70 <_free_r+0x24>
 8002db2:	6810      	ldr	r0, [r2, #0]
 8002db4:	6852      	ldr	r2, [r2, #4]
 8002db6:	4401      	add	r1, r0
 8002db8:	6019      	str	r1, [r3, #0]
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	e7d8      	b.n	8002d70 <_free_r+0x24>
 8002dbe:	d902      	bls.n	8002dc6 <_free_r+0x7a>
 8002dc0:	230c      	movs	r3, #12
 8002dc2:	602b      	str	r3, [r5, #0]
 8002dc4:	e7d4      	b.n	8002d70 <_free_r+0x24>
 8002dc6:	6820      	ldr	r0, [r4, #0]
 8002dc8:	1821      	adds	r1, r4, r0
 8002dca:	428a      	cmp	r2, r1
 8002dcc:	bf01      	itttt	eq
 8002dce:	6811      	ldreq	r1, [r2, #0]
 8002dd0:	6852      	ldreq	r2, [r2, #4]
 8002dd2:	1809      	addeq	r1, r1, r0
 8002dd4:	6021      	streq	r1, [r4, #0]
 8002dd6:	6062      	str	r2, [r4, #4]
 8002dd8:	605c      	str	r4, [r3, #4]
 8002dda:	e7c9      	b.n	8002d70 <_free_r+0x24>
 8002ddc:	bd38      	pop	{r3, r4, r5, pc}
 8002dde:	bf00      	nop
 8002de0:	2000013c 	.word	0x2000013c

08002de4 <_malloc_r>:
 8002de4:	b570      	push	{r4, r5, r6, lr}
 8002de6:	1ccd      	adds	r5, r1, #3
 8002de8:	f025 0503 	bic.w	r5, r5, #3
 8002dec:	3508      	adds	r5, #8
 8002dee:	2d0c      	cmp	r5, #12
 8002df0:	bf38      	it	cc
 8002df2:	250c      	movcc	r5, #12
 8002df4:	2d00      	cmp	r5, #0
 8002df6:	4606      	mov	r6, r0
 8002df8:	db01      	blt.n	8002dfe <_malloc_r+0x1a>
 8002dfa:	42a9      	cmp	r1, r5
 8002dfc:	d903      	bls.n	8002e06 <_malloc_r+0x22>
 8002dfe:	230c      	movs	r3, #12
 8002e00:	6033      	str	r3, [r6, #0]
 8002e02:	2000      	movs	r0, #0
 8002e04:	bd70      	pop	{r4, r5, r6, pc}
 8002e06:	f000 f87d 	bl	8002f04 <__malloc_lock>
 8002e0a:	4a21      	ldr	r2, [pc, #132]	; (8002e90 <_malloc_r+0xac>)
 8002e0c:	6814      	ldr	r4, [r2, #0]
 8002e0e:	4621      	mov	r1, r4
 8002e10:	b991      	cbnz	r1, 8002e38 <_malloc_r+0x54>
 8002e12:	4c20      	ldr	r4, [pc, #128]	; (8002e94 <_malloc_r+0xb0>)
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	b91b      	cbnz	r3, 8002e20 <_malloc_r+0x3c>
 8002e18:	4630      	mov	r0, r6
 8002e1a:	f000 f863 	bl	8002ee4 <_sbrk_r>
 8002e1e:	6020      	str	r0, [r4, #0]
 8002e20:	4629      	mov	r1, r5
 8002e22:	4630      	mov	r0, r6
 8002e24:	f000 f85e 	bl	8002ee4 <_sbrk_r>
 8002e28:	1c43      	adds	r3, r0, #1
 8002e2a:	d124      	bne.n	8002e76 <_malloc_r+0x92>
 8002e2c:	230c      	movs	r3, #12
 8002e2e:	4630      	mov	r0, r6
 8002e30:	6033      	str	r3, [r6, #0]
 8002e32:	f000 f868 	bl	8002f06 <__malloc_unlock>
 8002e36:	e7e4      	b.n	8002e02 <_malloc_r+0x1e>
 8002e38:	680b      	ldr	r3, [r1, #0]
 8002e3a:	1b5b      	subs	r3, r3, r5
 8002e3c:	d418      	bmi.n	8002e70 <_malloc_r+0x8c>
 8002e3e:	2b0b      	cmp	r3, #11
 8002e40:	d90f      	bls.n	8002e62 <_malloc_r+0x7e>
 8002e42:	600b      	str	r3, [r1, #0]
 8002e44:	18cc      	adds	r4, r1, r3
 8002e46:	50cd      	str	r5, [r1, r3]
 8002e48:	4630      	mov	r0, r6
 8002e4a:	f000 f85c 	bl	8002f06 <__malloc_unlock>
 8002e4e:	f104 000b 	add.w	r0, r4, #11
 8002e52:	1d23      	adds	r3, r4, #4
 8002e54:	f020 0007 	bic.w	r0, r0, #7
 8002e58:	1ac3      	subs	r3, r0, r3
 8002e5a:	d0d3      	beq.n	8002e04 <_malloc_r+0x20>
 8002e5c:	425a      	negs	r2, r3
 8002e5e:	50e2      	str	r2, [r4, r3]
 8002e60:	e7d0      	b.n	8002e04 <_malloc_r+0x20>
 8002e62:	684b      	ldr	r3, [r1, #4]
 8002e64:	428c      	cmp	r4, r1
 8002e66:	bf16      	itet	ne
 8002e68:	6063      	strne	r3, [r4, #4]
 8002e6a:	6013      	streq	r3, [r2, #0]
 8002e6c:	460c      	movne	r4, r1
 8002e6e:	e7eb      	b.n	8002e48 <_malloc_r+0x64>
 8002e70:	460c      	mov	r4, r1
 8002e72:	6849      	ldr	r1, [r1, #4]
 8002e74:	e7cc      	b.n	8002e10 <_malloc_r+0x2c>
 8002e76:	1cc4      	adds	r4, r0, #3
 8002e78:	f024 0403 	bic.w	r4, r4, #3
 8002e7c:	42a0      	cmp	r0, r4
 8002e7e:	d005      	beq.n	8002e8c <_malloc_r+0xa8>
 8002e80:	1a21      	subs	r1, r4, r0
 8002e82:	4630      	mov	r0, r6
 8002e84:	f000 f82e 	bl	8002ee4 <_sbrk_r>
 8002e88:	3001      	adds	r0, #1
 8002e8a:	d0cf      	beq.n	8002e2c <_malloc_r+0x48>
 8002e8c:	6025      	str	r5, [r4, #0]
 8002e8e:	e7db      	b.n	8002e48 <_malloc_r+0x64>
 8002e90:	2000013c 	.word	0x2000013c
 8002e94:	20000140 	.word	0x20000140

08002e98 <_realloc_r>:
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9a:	4607      	mov	r7, r0
 8002e9c:	4614      	mov	r4, r2
 8002e9e:	460e      	mov	r6, r1
 8002ea0:	b921      	cbnz	r1, 8002eac <_realloc_r+0x14>
 8002ea2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	f7ff bf9c 	b.w	8002de4 <_malloc_r>
 8002eac:	b922      	cbnz	r2, 8002eb8 <_realloc_r+0x20>
 8002eae:	f7ff ff4d 	bl	8002d4c <_free_r>
 8002eb2:	4625      	mov	r5, r4
 8002eb4:	4628      	mov	r0, r5
 8002eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002eb8:	f000 f826 	bl	8002f08 <_malloc_usable_size_r>
 8002ebc:	42a0      	cmp	r0, r4
 8002ebe:	d20f      	bcs.n	8002ee0 <_realloc_r+0x48>
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	4638      	mov	r0, r7
 8002ec4:	f7ff ff8e 	bl	8002de4 <_malloc_r>
 8002ec8:	4605      	mov	r5, r0
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	d0f2      	beq.n	8002eb4 <_realloc_r+0x1c>
 8002ece:	4631      	mov	r1, r6
 8002ed0:	4622      	mov	r2, r4
 8002ed2:	f7ff ff17 	bl	8002d04 <memcpy>
 8002ed6:	4631      	mov	r1, r6
 8002ed8:	4638      	mov	r0, r7
 8002eda:	f7ff ff37 	bl	8002d4c <_free_r>
 8002ede:	e7e9      	b.n	8002eb4 <_realloc_r+0x1c>
 8002ee0:	4635      	mov	r5, r6
 8002ee2:	e7e7      	b.n	8002eb4 <_realloc_r+0x1c>

08002ee4 <_sbrk_r>:
 8002ee4:	b538      	push	{r3, r4, r5, lr}
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	4c05      	ldr	r4, [pc, #20]	; (8002f00 <_sbrk_r+0x1c>)
 8002eea:	4605      	mov	r5, r0
 8002eec:	4608      	mov	r0, r1
 8002eee:	6023      	str	r3, [r4, #0]
 8002ef0:	f7ff fb76 	bl	80025e0 <_sbrk>
 8002ef4:	1c43      	adds	r3, r0, #1
 8002ef6:	d102      	bne.n	8002efe <_sbrk_r+0x1a>
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	b103      	cbz	r3, 8002efe <_sbrk_r+0x1a>
 8002efc:	602b      	str	r3, [r5, #0]
 8002efe:	bd38      	pop	{r3, r4, r5, pc}
 8002f00:	20000208 	.word	0x20000208

08002f04 <__malloc_lock>:
 8002f04:	4770      	bx	lr

08002f06 <__malloc_unlock>:
 8002f06:	4770      	bx	lr

08002f08 <_malloc_usable_size_r>:
 8002f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f0c:	1f18      	subs	r0, r3, #4
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	bfbc      	itt	lt
 8002f12:	580b      	ldrlt	r3, [r1, r0]
 8002f14:	18c0      	addlt	r0, r0, r3
 8002f16:	4770      	bx	lr

08002f18 <_init>:
 8002f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1a:	bf00      	nop
 8002f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1e:	bc08      	pop	{r3}
 8002f20:	469e      	mov	lr, r3
 8002f22:	4770      	bx	lr

08002f24 <_fini>:
 8002f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f26:	bf00      	nop
 8002f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2a:	bc08      	pop	{r3}
 8002f2c:	469e      	mov	lr, r3
 8002f2e:	4770      	bx	lr
